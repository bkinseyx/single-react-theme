{"version":3,"sources":["features/counter/counterSlice.ts","../src lazy /^/.*$/ groupOptions: {} namespace object","index.tsx","app/store.ts","App.tsx"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","incrementAsync","amount","dispatch","setTimeout","selectCount","counter","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","document","querySelectorAll","forEach","el","reactApp","getAttribute","reactConfig","JSON","parse","console","log","ReactDOM","render","StrictMode","store","configureStore","reducer","counterReducer","LazyComponent","React","memo","Lazy","lazy","a","App","fallback"],"mappings":"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","file":"static/js/main.30db7f64.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","var map = {\n\t\"./\": [\n\t\t4,\n\t\t9\n\t],\n\t\"./App\": [\n\t\t6,\n\t\t9\n\t],\n\t\"./App.tsx\": [\n\t\t6,\n\t\t9\n\t],\n\t\"./ReduxDemo\": [\n\t\t19,\n\t\t9,\n\t\t2\n\t],\n\t\"./ReduxDemo.css\": [\n\t\t36,\n\t\t7,\n\t\t10\n\t],\n\t\"./ReduxDemo.test\": [\n\t\t23,\n\t\t9,\n\t\t0,\n\t\t3\n\t],\n\t\"./ReduxDemo.test.tsx\": [\n\t\t23,\n\t\t9,\n\t\t0,\n\t\t3\n\t],\n\t\"./ReduxDemo.tsx\": [\n\t\t19,\n\t\t9,\n\t\t2\n\t],\n\t\"./app/store\": [\n\t\t5,\n\t\t9\n\t],\n\t\"./app/store.ts\": [\n\t\t5,\n\t\t9\n\t],\n\t\"./features/counter/Counter\": [\n\t\t18,\n\t\t9,\n\t\t4\n\t],\n\t\"./features/counter/Counter.module.css\": [\n\t\t35,\n\t\t7,\n\t\t11\n\t],\n\t\"./features/counter/Counter.tsx\": [\n\t\t18,\n\t\t9,\n\t\t4\n\t],\n\t\"./features/counter/counterSlice\": [\n\t\t2,\n\t\t9\n\t],\n\t\"./features/counter/counterSlice.ts\": [\n\t\t2,\n\t\t9\n\t],\n\t\"./index\": [\n\t\t4,\n\t\t9\n\t],\n\t\"./index.css\": [\n\t\t14,\n\t\t7\n\t],\n\t\"./index.tsx\": [\n\t\t4,\n\t\t9\n\t],\n\t\"./logo.svg\": [\n\t\t37,\n\t\t7,\n\t\t12\n\t],\n\t\"./react-app-env.d\": [\n\t\t24,\n\t\t7,\n\t\t5\n\t],\n\t\"./react-app-env.d.ts\": [\n\t\t24,\n\t\t7,\n\t\t5\n\t],\n\t\"./setupTests\": [\n\t\t25,\n\t\t9,\n\t\t1,\n\t\t6\n\t],\n\t\"./setupTests.ts\": [\n\t\t25,\n\t\t9,\n\t\t1,\n\t\t6\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 30;\nmodule.exports = webpackAsyncContext;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\ndocument.querySelectorAll('[data-react-app]').forEach((el) => {\r\n  const reactApp = el.getAttribute('data-react-app');\r\n  const reactConfig = JSON.parse(el.getAttribute('data-react-config') ?? '');\r\n  if (!reactApp) {\r\n    return;\r\n  }\r\n  console.log({ reactApp });\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App reactApp={reactApp} reactConfig={reactConfig} />\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    el\r\n  );\r\n});\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React, { Suspense } from 'react';\r\n\r\ninterface AppProps {\r\n  reactApp: string;\r\n  reactConfig: {};\r\n}\r\n\r\nconst LazyComponent = React.memo(({ reactApp, reactConfig }: AppProps) => {\r\n  const Lazy = React.lazy(async () => await import(`./${reactApp}`));\r\n  return <Lazy reactConfig={reactConfig} />;\r\n});\r\n\r\nexport const App = ({ reactApp, reactConfig }: AppProps) => (\r\n  <div>\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <LazyComponent reactApp={reactApp} reactConfig={reactConfig} />\r\n    </Suspense>\r\n  </div>\r\n);\r\n"],"sourceRoot":""}