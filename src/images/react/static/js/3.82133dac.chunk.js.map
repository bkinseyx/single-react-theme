{"version":3,"sources":["features/userCard/api/deleteUserApi.ts","features/userCard/api/getUserApi.ts","features/userCard/api/saveUserApi.ts","features/userCard/components/UserItem/getDeleteOnClick.ts","features/userCard/components/UserItem/getEditOnClick.ts","features/userCard/components/UserItem/UserItem.module.css","features/userCard/components/UserItem/UserItem.tsx","features/userCard/selectors/usersSelector.ts","features/userCard/components/UserListCard/getCreateOnClick.ts","features/userCard/components/UserEditCard/cancelOnClick.ts","features/userCard/selectors/getUserEditFormSelector.ts","features/userCard/components/UserEditCard/formOnChange.ts","features/userCard/components/UserEditCard/formOnSubmit.ts","features/userCard/components/UserEditCard/resetOnClick.ts","features/userCard/components/UserListCard/UserListCard.module.css","features/userCard/selectors/showListSelector.ts","features/userCard/components/UserListCard/UserListCard.tsx","app/components/ObjectFieldTemplate/ObjectFieldTemplate.tsx","app/utils/formUtils.ts","app/components/PhoneNumberWidget/PhoneNumberWidget.tsx","app/components/CustomForm/CustomForm.tsx","features/userCard/components/UserEditCard/UserEditCard.tsx","app/components/CustomForm/CustomForm.module.css","app/components/ObjectFieldTemplate/ObjectFieldTemplate.module.css","features/userCard/components/UserCard/UserCard.tsx","app/utils/liferayUtils.ts","features/userCard/api/getUsersApi.ts","app/components/CardFooterWrapper/CardFooterWrapper.tsx","app/components/CardFooterWrapper/CardFooterWrapper.module.css"],"names":["deleteUserApi","user","a","store","dispatch","deleteUserBegin","executeLiferayService","userId","deleteUserSuccess","getUsersApi","deleteUserFailure","getUserApi","getUserBegin","userDetails","getUserSuccess","getUserFailure","saveUserApi","saveUserBegin","updateUserDummyData","createUserDummyData","getLiferayField","companyId","groupIds","saveUserSuccess","saveUserFailure","getDeleteOnClick","event","stopPropagation","getEditOnClick","module","exports","UserItem","emptyUser","className","styles","item","firstName","middleName","lastName","screenName","emailAddress","buttonsWrapper","onClick","usersSelector","state","users","getCreateOnClick","createUser","cancelOnClick","cancelEditForm","getUserEditFormSelector","editForm","formOnChange","formData","setFormData","formOnSubmit","console","log","resetOnClick","resetEditForm","showListSelector","data","UserListCard","useEffect","userList","useSelector","role","aria-label","listGroup","map","key","ObjectFieldTemplate","TitleField","properties","description","title","required","idSchema","row","prop","content","getFieldTitleFromError","error","schema","propertyFromError","property","substr","getTransformErrors","formats","errors","errorStrings","getErrorStrings","Object","keys","includes","params","format","message","stack","split","slice","word","join","phoneNumberFormat","regex","emailAddressFormat","reduce","customFormats","widgets","phoneNumberWidget","value","onChange","mask","maskChar","type","target","CustomForm","React","forwardRef","ref","formKey","uiSchema","transformErrors","onSubmit","onError","e","children","Fragment","showErrorList","wrapper","UserEditCard","createUserSchema","updateUserSchema","formRef","useRef","CardFooterWrapper","current","submit","UserCard","reactConfig","liferayServicePromise","createPromise","_resolve","_reject","promise","Promise","resolve","reject","api","expectedResultType","window","Liferay","promisifiedLiferayService","postMessage","JSON","stringify","oldPassword","newPassword1","newPassword2","passwordReset","reminderQueryQuestion","reminderQueryAnswer","facebookId","openId","languageId","timeZoneId","greeting","comments","prefixId","suffixId","birthdayMonth","birthdayDay","birthdayYear","smsSn","facebookSn","jabberSn","skypeSn","twitterSn","jobTitle","organizationIds","roleIds","userGroupRoles","userGroupIds","autoPassword","password1","password2","autoScreenName","locale","male","sendEmail","serviceContext","fieldName","getFieldFromLiferayObject","liferayFields","localStorage","getItem","parse","addEventListener","result","getUsersBegin","groupId","getUsersSuccess","getUsersFailure"],"mappings":"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","file":"static/js/3.82133dac.chunk.js","sourcesContent":["import {\n  User,\n  deleteUserBegin,\n  deleteUserSuccess,\n  deleteUserFailure,\n  deleteUser,\n} from '../userSlice';\nimport { store } from 'app/store';\nimport {\n  promisifiedLiferayService,\n  executeLiferayService,\n} from 'app/utils/liferayUtils';\nimport { getUsersApi } from './getUsersApi';\n\nexport const deleteUserApi = (user: User) => async () => {\n  // if (process.env.NODE_ENV === 'development') {\n  //   store.dispatch(deleteUser(user));\n  //   return;\n  // }\n  try {\n    store.dispatch(deleteUserBegin());\n    await executeLiferayService(\n      '/user/delete-user',\n      {\n        userId: user.userId,\n      },\n      'object'\n    );\n    store.dispatch(deleteUserSuccess());\n    getUsersApi();\n  } catch (error) {\n    store.dispatch(deleteUserFailure(error));\n  }\n};\n","import { store } from 'app/store';\nimport {\n  promisifiedLiferayService,\n  executeLiferayService,\n} from 'app/utils/liferayUtils';\nimport {\n  getUserBegin,\n  getUserSuccess,\n  getUserFailure,\n  User,\n} from '../userSlice';\n\nexport const getUserApi = async (user: User) => {\n  if (process.env.NODE_ENV === 'development') {\n    store.dispatch(getUserSuccess(user));\n    return;\n  }\n  store.dispatch(getUserBegin());\n  try {\n    const userDetails = await executeLiferayService(\n      '/user/get-user-by-id',\n      { userId: user.userId },\n      'object'\n    );\n    store.dispatch(getUserSuccess(userDetails as User));\n  } catch (error) {\n    store.dispatch(getUserFailure(error));\n  }\n};\n\n// promisifiedLiferayService(\n//   \"/role/get-roles\",\n//   { companyId: Liferay.ThemeDisplay.getCompanyId(), types: [1] },\n//   \"array\"\n// ),\n// promisifiedLiferayService(\n//   \"/role/get-user-roles\",\n//   { userId },\n//   \"array\"\n// )\n","import { store } from 'app/store';\nimport {\n  promisifiedLiferayService,\n  updateUserDummyData,\n  createUserDummyData,\n  getLiferayField,\n  executeLiferayService,\n} from 'app/utils/liferayUtils';\nimport {\n  saveUserBegin,\n  saveUserSuccess,\n  saveUserFailure,\n  User,\n} from '../userSlice';\nimport { getUsersApi } from './getUsersApi';\n\nexport const saveUserApi = async (user: User) => {\n  // if (process.env.NODE_ENV === 'development') {\n  //   store.dispatch(saveUserSuccess());\n  //   return;\n  // }\n  try {\n    store.dispatch(saveUserBegin());\n    await executeLiferayService(\n      user.userId ? '/user/update-user' : '/user/add-user',\n      {\n        ...(user.userId ? updateUserDummyData : createUserDummyData), // is this the appropriate place to complain that the liferay api is ridiculous?\n        companyId: await getLiferayField('companyId'),\n        groupIds: [await getLiferayField('groupId')],\n        ...user,\n      },\n      'object'\n    );\n    store.dispatch(saveUserSuccess());\n    getUsersApi();\n  } catch (error) {\n    store.dispatch(saveUserFailure(error));\n  }\n};\n","import React from 'react';\nimport { store } from 'app/store';\nimport { User } from '../../userSlice';\nimport { deleteUserApi } from 'features/userCard/api/deleteUserApi';\n\nexport const getDeleteOnClick = (user: User) => (\n  event: React.MouseEvent\n): void => {\n  /* istanbul ignore next */\n  if (!user) {\n    return;\n  }\n  store.dispatch(deleteUserApi(user));\n  event.stopPropagation();\n};\n","import React from 'react';\nimport { User } from '../../userSlice';\nimport { getUserApi } from 'features/userCard/api/getUserApi';\n\nexport const getEditOnClick = (user?: User) => (\n  event: React.MouseEvent\n): void => {\n  /* istanbul ignore next */\n  if (!user) {\n    return;\n  }\n  getUserApi(user);\n  event.stopPropagation();\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"UserItem_item__2gGRR\",\"buttonsWrapper\":\"UserItem_buttonsWrapper__1e4zy\"};","import React from 'react';\n\nimport { User } from 'features/userCard/userSlice';\nimport { emptyUser } from 'features/userCard/helpers/userTemplate';\nimport { getDeleteOnClick } from './getDeleteOnClick';\nimport { getEditOnClick } from './getEditOnClick';\nimport styles from './UserItem.module.css';\n\ninterface UserProps {\n  user: User;\n}\n\nexport const UserItem: React.FC<UserProps> = ({ user = emptyUser }) => (\n  <li className={`list-group-item ${styles.item}`}>\n    <div>\n      Name: {user.firstName} {user.middleName} {user.lastName}\n    </div>\n    <div>Screen name: {user.screenName ?? '<none>'}</div>\n    <div>Email Address: {user.emailAddress ?? '<none>'}</div>\n    <div className={`flex-grow ${styles.buttonsWrapper}`}>\n      <button className=\"btn btn-primary\" onClick={getEditOnClick(user)}>\n        Edit\n      </button>\n      <button className=\"btn btn-danger\" onClick={getDeleteOnClick(user)}>\n        Delete\n      </button>\n    </div>\n  </li>\n);\n","import { RootState } from 'app/rootReducer';\nimport { UserState } from '../userSlice';\n\nexport const usersSelector = (state: RootState): UserState['users'] =>\n  state.user.users;\n","import { store } from 'app/store';\nimport { createUser } from '../../userSlice';\n\nexport const getCreateOnClick = () => (): void => {\n  store.dispatch(createUser());\n};\n","import { store } from 'app/store';\nimport { cancelEditForm } from '../../userSlice';\n\nexport const cancelOnClick = (): void => {\n  store.dispatch(cancelEditForm());\n};\n","import { RootState } from 'app/rootReducer';\nimport { UserEditForm } from '../userSlice';\n\nexport const getUserEditFormSelector = (state: RootState): UserEditForm =>\n  state.user.editForm;\n","import { store } from 'app/store';\nimport { setFormData } from '../../userSlice';\n\nexport const formOnChange = ({ formData }: { formData: any }) => {\n  store.dispatch(setFormData(formData));\n};\n","import { User } from '../../userSlice';\nimport { saveUserApi } from 'features/userCard/api/saveUserApi';\n\nexport const formOnSubmit = ({ formData }: { formData: User }) => {\n  console.log('submitted successfully');\n  saveUserApi(formData);\n};\n","import { store } from 'app/store';\nimport { resetEditForm } from '../../userSlice';\n\nexport const resetOnClick = () => {\n  store.dispatch(resetEditForm());\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listGroup\":\"UserListCard_listGroup__q1V-7\"};","import { RootState } from 'app/rootReducer';\n\nexport const showListSelector = (state: RootState): boolean =>\n  !state.user.editForm.data;\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { UserItem } from '../UserItem/UserItem';\nimport { usersSelector } from '../../selectors/usersSelector';\nimport { CardFooterWrapper } from 'app/components/CardFooterWrapper/CardFooterWrapper';\nimport { getCreateOnClick } from './getCreateOnClick';\nimport { getUsersApi } from 'features/userCard/api/getUsersApi';\nimport styles from './UserListCard.module.css';\n\nexport const UserListCard: React.FC = () => {\n  useEffect(() => {\n    getUsersApi();\n  }, []);\n\n  const userList = useSelector(usersSelector);\n\n  return (\n    <div className=\"card\" role=\"main\" aria-label=\"User Card\">\n      <div className=\"card-header\">\n        <h5 className=\"card-title\">Users</h5>\n      </div>\n      <div className=\"card-body\">\n        <ul className={`list-group ${styles.listGroup}`}>\n          {userList.map((user) => (\n            <UserItem key={user.userId} user={user}></UserItem>\n          ))}\n        </ul>\n      </div>\n      <div className=\"card-footer\">\n        <CardFooterWrapper>\n          <button className=\"btn btn-primary\" onClick={getCreateOnClick()}>\n            Create New User\n          </button>\n        </CardFooterWrapper>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ObjectFieldTemplateProps } from 'react-jsonschema-form';\nimport styles from './ObjectFieldTemplate.module.css';\n\nexport const ObjectFieldTemplate = ({\n  TitleField,\n  properties,\n  title,\n  description,\n  required,\n  idSchema,\n}: ObjectFieldTemplateProps) => {\n  return (\n    <fieldset>\n      <div>\n        <div className={`row ${styles.row}`}>\n          {properties.map((prop) => (\n            <div key={prop.content.key as string | number | undefined}>\n              {prop.content}\n            </div>\n          ))}\n        </div>\n        {description}\n      </div>\n    </fieldset>\n  );\n};\n","import { StatelessComponent } from 'react';\nimport { AjvError, WidgetProps } from 'react-jsonschema-form';\nimport { JSONSchema6 } from 'json-schema';\n\nimport PhoneNumberWidget from 'app/components/PhoneNumberWidget/PhoneNumberWidget';\n\n/** field title is the plain english name (with space chars). */\nconst getFieldTitleFromError = (error: AjvError, schema: JSONSchema6) => {\n  // for some reason error properties are prepended with a . so we strip 'em off\n  const propertyFromError = error.property.substr(1);\n\n  // \"as any\" necessary here because JSONSchema6 properties can be undefined for\n  // some reason that eludes me.\n  // In our case we are fine here since we know all our properties must be strings.\n  console.log((schema.properties as any)[propertyFromError].title);\n  return (schema.properties as any)[propertyFromError].title;\n};\n\n/** given errors, generate user friendly error messages in a way that react-jsonschema-form expects */\nconst getTransformErrors = (schema: JSONSchema6, formats: Formats) => (\n  errors: AjvError[]\n) => {\n  const errorStrings = getErrorStrings(formats);\n  console.log({ errorStrings, errors });\n  return errors.map((error) =>\n    Object.keys(errorStrings).includes(error.params.format)\n      ? {\n          ...error,\n          message: errorStrings[error.params.format],\n          stack: `${getFieldTitleFromError(error, schema)} ${\n            errorStrings[error.params.format]\n          }`,\n        }\n      : {\n          ...error,\n          message: error.message\n            ?.split(' ')\n            .slice(1)\n            .map((word) => (word === 'property' ? 'field' : word))\n            .join(' '),\n          stack: `${getFieldTitleFromError(error, schema)} ${error.stack\n            ?.split(' ')\n            .slice(1)\n            .map((word) => (word === 'property' ? 'field' : word))\n            .join(' ')}`,\n        }\n  );\n};\n\ninterface Formats {\n  [key: string]: {\n    regex: RegExp;\n    error: string;\n  };\n}\n\n/**\n * I think it would be best to define formats directly with the error message.\n * This isn't built into react-jsonschema-format, so I will do it myself.\n */\nconst formats: Formats = {\n  phoneNumberFormat: {\n    regex: /^$|^\\(?([2-9][0-8][0-9])\\)?[-. ]?([2-9][0-9]{2})[-. ]?([0-9]{4})$/,\n    error: 'must be valid and in the format of XXX-XXX-XXXX',\n  },\n  emailAddressFormat: {\n    regex: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    error: 'must be in the format of something@domain.tld',\n  },\n};\n\n/** react-jsonschema-form expects formats like [key]: regex */\nconst getCustomFormats = (formats: Formats) =>\n  Object.keys(formats).reduce(\n    (customFormats, key) => ({\n      ...customFormats,\n      [key]: formats[key].regex,\n    }),\n    {}\n  );\n\ninterface ErrorStrings {\n  [key: string]: string;\n}\n\ntype GetErrorStrings = (formats: Formats) => ErrorStrings;\n\n/** transforms errors from format like [key]: regex */\nconst getErrorStrings: GetErrorStrings = (formats) =>\n  Object.keys(formats).reduce(\n    (customFormats, key) => ({\n      ...customFormats,\n      [key]: formats[key].error,\n    }),\n    {}\n  );\n\n/** extended components used by react-jsonschema-forms */\nconst widgets = {\n  phoneNumberWidget: PhoneNumberWidget as StatelessComponent<WidgetProps>,\n};\n\nexport { getTransformErrors, formats, widgets, getCustomFormats };\n","import React from 'react';\nimport InputMask from 'react-input-mask';\n\ninterface PhoneNumberWidgetProps {\n  value: string;\n  required: boolean | undefined;\n  onChange: (value: string) => void;\n}\n\n/**\n * This widget is an custom field component that can be used inside of react-jsonschema-forms\n * The props are fed in from react-jsonschema-forms.\n * It is necessary to make sure value is initialized as a string, rather than undefined.\n * Because otherwise react will give a warning about an uncontrolled component changing\n * to a controlled component. I also like input masking.\n */\nconst PhoneNumberWidget: React.FC<PhoneNumberWidgetProps> = ({\n  value = '',\n  required,\n  onChange,\n}) => (\n  <InputMask\n    mask=\"999-999-9999\"\n    maskChar=\"_\"\n    type=\"tel\"\n    className=\"form-control\"\n    value={value}\n    required={required}\n    onChange={(event): void => onChange(event.target.value)}\n  />\n);\n\nexport default PhoneNumberWidget;\n","import React, { Ref } from 'react';\nimport Form, { UiSchema } from 'react-jsonschema-form';\nimport { JSONSchema6 } from 'json-schema';\nimport styles from './CustomForm.module.css';\n\nimport { ObjectFieldTemplate } from 'app/components/ObjectFieldTemplate/ObjectFieldTemplate';\nimport {\n  widgets,\n  getCustomFormats,\n  getTransformErrors,\n  formats,\n} from 'app/utils/formUtils';\n\nexport interface CustomFormImperative {\n  submit: () => void;\n}\n\ninterface CustomFormProps {\n  formKey: number;\n  data: {};\n  schema: JSONSchema6;\n  uiSchema: UiSchema;\n  formOnChange: ({ formData }: { formData: any }) => void;\n  formOnSubmit: ({ formData }: { formData: any }) => void;\n}\n\nexport const CustomForm = React.forwardRef(\n  (\n    {\n      formKey,\n      data,\n      schema,\n      uiSchema,\n      formOnChange,\n      formOnSubmit,\n    }: CustomFormProps,\n    ref: Ref<CustomFormImperative>\n  ) => {\n    return (\n      <Form\n        // key only seems to be necessary in order to clear the form\n        // see https://github.com/rjsf-team/react-jsonschema-form/issues/953#issuecomment-397815654\n        key={formKey}\n        schema={schema}\n        uiSchema={uiSchema}\n        widgets={widgets}\n        customFormats={getCustomFormats(formats)}\n        transformErrors={getTransformErrors(schema, formats)}\n        formData={data}\n        onChange={formOnChange}\n        onSubmit={formOnSubmit}\n        onError={(e) => console.log(e)}\n        children={<React.Fragment />}\n        showErrorList={false}\n        ObjectFieldTemplate={ObjectFieldTemplate}\n        ref={ref as any}\n        className={styles.wrapper}\n      />\n    );\n  }\n);\n\n// export const CustomForm = forwardRef((\n//   { key, data, schema, uiSchema }: CustomFormProps,\n//   ref: Ref<Form>\n// ) => {\n//   const formRef = useRef<Form<{}>>();\n\n//   useImperativeHandle(ref, () => ({\n//     submit: () => {\n//       formRef?.current?.submit();\n//     },\n//   })));\n\n//   return (\n//     <Form\n//       // key only seems to be necessary in order to clear the form\n//       // see https://github.com/rjsf-team/react-jsonschema-form/issues/953#issuecomment-397815654\n//       key={key}\n//       schema={schema}\n//       uiSchema={uiSchema}\n//       widgets={widgets}\n//       customFormats={getCustomFormats(formats)}\n//       transformErrors={getTransformErrors(schema, formats)}\n//       formData={data}\n//       onChange={formOnChange}\n//       onSubmit={formOnSubmit}\n//       onError={(e) => console.log(e)}\n//       children={<React.Fragment />}\n//       showErrorList={false}\n//       ObjectFieldTemplate={ObjectFieldTemplate}\n//       ref={formRef as any}\n//     />\n//   );\n// };\n","import React, { useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { CardFooterWrapper } from 'app/components/CardFooterWrapper/CardFooterWrapper';\nimport { cancelOnClick } from './cancelOnClick';\nimport { getUserEditFormSelector } from 'features/userCard/selectors/getUserEditFormSelector';\nimport { formOnChange } from './formOnChange';\nimport { formOnSubmit } from './formOnSubmit';\nimport {\n  CustomForm,\n  CustomFormImperative,\n} from 'app/components/CustomForm/CustomForm';\nimport { resetOnClick } from './resetOnClick';\n\nexport const UserEditCard: React.FC = () => {\n  const {\n    formKey,\n    data = {},\n    createUserSchema,\n    updateUserSchema,\n    uiSchema,\n  } = useSelector(getUserEditFormSelector);\n  const formRef = useRef<CustomFormImperative>(null);\n\n  console.log('here');\n\n  return (\n    <div className=\"card\" role=\"main\" aria-label=\"User Card\">\n      <div className=\"card-header\">\n        <h5 className=\"card-title\">User Edit</h5>\n      </div>\n      <div className=\"card-body\">\n        <CustomForm\n          formKey={formKey}\n          data={data}\n          schema={data.userId ? updateUserSchema : createUserSchema}\n          uiSchema={uiSchema}\n          formOnChange={formOnChange}\n          formOnSubmit={formOnSubmit}\n          ref={formRef}\n        />\n      </div>\n      <div className=\"card-footer\">\n        <CardFooterWrapper>\n          <button\n            className=\"btn btn-primary\"\n            onClick={() => {\n              formRef.current?.submit();\n            }}\n          >\n            Save User\n          </button>\n          <button className=\"btn btn-secondary\" onClick={resetOnClick}>\n            Reset\n          </button>\n          <button className=\"btn btn-primary\" onClick={cancelOnClick}>\n            Cancel\n          </button>\n        </CardFooterWrapper>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CustomForm_wrapper__1tUmo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"ObjectFieldTemplate_row__fITKL\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { TopLevelComponent } from 'app/utils/typeUtils';\nimport { showListSelector } from '../../selectors/showListSelector';\nimport { UserListCard } from '../UserListCard/UserListCard';\nimport { UserEditCard } from '../UserEditCard/UserEditCard';\n\ninterface UserCardProps {\n  reactConfig?: {\n    title?: string;\n  };\n}\nexport const UserCard: TopLevelComponent<UserCardProps> = ({ reactConfig }) => {\n  const showList = useSelector(showListSelector);\n  return showList ? <UserListCard /> : <UserEditCard />;\n};\nexport default UserCard;\n","declare global {\n  interface Window {\n    Liferay: any;\n    getFieldFromLiferayObject: (fieldName: string) => string;\n    promisifiedLiferayService: (\n      api: string,\n      data: {},\n      expectedResultType: string\n    ) => Promise<{}>;\n  }\n}\n\n// This abstracts out most of the error handling and makes invoking api calls\n// inside of redux actions very tight, composable with Promise.all and\n// amenable to modern async-await syntax inside of thunk actions\nexport const promisifiedLiferayService = (\n  api: string,\n  data: {},\n  expectedResultType: any\n) =>\n  new Promise((resolve, reject) => {\n    try {\n      window.Liferay.Service(api, data, (result: any) => {\n        if (typeof result === expectedResultType) {\n          resolve(result);\n        } else if (expectedResultType === 'array' && Array.isArray(result)) {\n          resolve(result);\n        } else if (typeof result === 'string') {\n          reject(result);\n        } else {\n          reject('Unexpected error.');\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n\nconst createPromise = () => {\n  let _resolve, _reject;\n\n  const promise: any = new Promise(function(resolve, reject) {\n    _resolve = resolve;\n    _reject = reject;\n  });\n\n  promise.resolve = _resolve;\n  promise.reject = _reject;\n\n  return promise;\n};\n\nlet liferayServicePromise: any;\n\nexport const executeLiferayService = async (\n  api: string,\n  data: {},\n  expectedResultType: 'string' | 'array' | 'object'\n) => {\n  if (window.Liferay) {\n    return window.promisifiedLiferayService(api, data, expectedResultType);\n  }\n  window.postMessage(\n    {\n      type: 'EXECUTE_LIFERAY_SERVICE',\n      api,\n      data: JSON.stringify(data),\n      expectedResultType,\n    },\n    '*'\n  );\n  liferayServicePromise = createPromise();\n  return await liferayServicePromise;\n  // return {\n  //   string: '',\n  //   array: [],\n  //   object: {},\n  // }[expectedResultType];\n};\n\nexport const updateUserDummyData = {\n  oldPassword: '',\n  newPassword1: '',\n  newPassword2: '',\n  passwordReset: false,\n  reminderQueryQuestion: '',\n  reminderQueryAnswer: '',\n  screenName: 'not_null',\n  emailAddress: 'test@example.com',\n  facebookId: 0,\n  openId: '', // this is weird: only id field here that takes a string instead of an int\n  languageId: 0,\n  timeZoneId: 0,\n  greeting: '',\n  comments: '',\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  prefixId: 0,\n  suffixId: 0,\n  birthdayMonth: 1,\n  birthdayDay: 1,\n  birthdayYear: 1970,\n  smsSn: '',\n  facebookSn: '',\n  jabberSn: '',\n  skypeSn: '',\n  twitterSn: '',\n  jobTitle: '',\n  groupIds: null,\n  organizationIds: [],\n  roleIds: [],\n  userGroupRoles: [],\n  userGroupIds: [],\n};\n\nexport const createUserDummyData = {\n  autoPassword: false,\n  password1: '', //\n  password2: '', //\n  autoScreenName: false,\n  screenName: '', //\n  emailAddress: '', //\n  facebookId: 0,\n  openId: '',\n  locale: 'en_US',\n  firstName: '', //\n  middleName: '', //\n  lastName: '', //\n  prefixId: 0,\n  suffixId: 0,\n  male: true,\n  birthdayMonth: 1,\n  birthdayDay: 1,\n  birthdayYear: 1970,\n  jobTitle: '',\n  groupIds: null,\n  organizationIds: null,\n  roleIds: null,\n  userGroupIds: null,\n  sendEmail: false,\n  serviceContext: {},\n};\n\nexport const getLiferayField = async (fieldName: string): Promise<string> => {\n  if (window.Liferay) {\n    return window.getFieldFromLiferayObject(fieldName);\n  }\n  const liferayFields = localStorage.getItem('liferayFields');\n  return JSON.parse(liferayFields as string)[fieldName];\n};\n\nwindow.addEventListener('message', function(event) {\n  if (event.data.type === 'LOCAL_RETURN_LIFERAY_SERVICE_RESULT') {\n    liferayServicePromise.resolve(event.data.result);\n  }\n});\n","import { store } from 'app/store';\nimport {\n  promisifiedLiferayService,\n  getLiferayField,\n  executeLiferayService,\n} from 'app/utils/liferayUtils';\nimport {\n  getUsersBegin,\n  getUsersSuccess,\n  getUsersFailure,\n  User,\n} from '../userSlice';\n\nconst dummyUserData: User[] = [\n  {\n    userId: '1',\n    firstName: 'Ben',\n    middleName: '',\n    lastName: 'Kinsey',\n  },\n];\n\nexport const getUsersApi = async () => {\n  // if (process.env.NODE_ENV === 'development') {\n  //   store.dispatch(getUsersSuccess(dummyUserData));\n  //   return;\n  // }\n  try {\n    store.dispatch(getUsersBegin());\n\n    // fetch('/api/jsonws/invoke', {\n    //   headers: {\n    //     accept: 'application/json, text/javascript, */*; q=0.01',\n    //     'accept-language': 'en-US,en;q=0.9',\n    //     'cache-control': 'no-cache',\n    //     'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\n    //     pragma: 'no-cache',\n    //     'sec-fetch-dest': 'empty',\n    //     'sec-fetch-mode': 'cors',\n    //     'sec-fetch-site': 'same-origin',\n    //     'x-requested-with': 'XMLHttpRequest',\n    //   },\n    //   referrer: 'http://localhost:8080/web/guest/user-admin',\n    //   referrerPolicy: 'no-referrer-when-downgrade',\n    //   body:\n    //     'cmd=' +\n    //     encodeURIComponent('/user/get-group-users\":{\"groupId\":\"20124\"}}') +\n    //     '&p_auth=Fs4bLSXH',\n    //   method: 'POST',\n    //   mode: 'cors',\n    //   credentials: 'include',\n    // })\n    //   .then((response) => response.json())\n    //   .then(console.log);\n    const users = (await executeLiferayService(\n      '/user/get-group-users',\n      {\n        groupId: await getLiferayField('groupId'),\n        // start: 1,\n        // end: 2\n      },\n      'array'\n    )) as User[];\n    store.dispatch(getUsersSuccess(users));\n  } catch (error) {\n    store.dispatch(getUsersFailure(error));\n  }\n};\n","import React from 'react';\nimport styles from './CardFooterWrapper.module.css';\n\nexport const CardFooterWrapper: React.FC = ({ children }) => (\n  <div className={styles.wrapper}>{children}</div>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CardFooterWrapper_wrapper__1sA5G\"};"],"sourceRoot":""}