{"version":3,"sources":["features/toDoCard/reducers/updateToDoReducer.test.ts"],"names":["test","state","store","getState","toDo","originalToDo","toDoList","find","p","toDoId","expect","isComplete","toBeTruthy","description","toBe","dispatch","updateToDo","changedToDo","toBeFalsy","backToOriginalToDo","toMatchInlineSnapshot","toEqual"],"mappings":"+GAAA,0BAGAA,KAAK,mBAAmB,WAAO,IAAD,IAGxBC,EAAQC,IAAMC,WAAWC,KACvBC,EAAeJ,EAAMK,SAASC,MAAK,SAACC,GAAD,OAAoB,IAAbA,EAAEC,UAClDC,OAAM,OAACL,QAAD,IAACA,OAAD,EAACA,EAAcM,YAAYC,aACjCF,OAAM,OAACL,QAAD,IAACA,OAAD,EAACA,EAAcQ,aAAaC,KAAK,aAEvCZ,IAAMa,SAASC,qBAAW,CAAEP,OAAQ,EAAGE,YAAY,KAEnD,IAAIM,GADJhB,EAAQC,IAAMC,WAAWC,MACDE,SAASC,MAAK,SAACC,GAAD,OAAoB,IAAbA,EAAEC,UAC/CC,OAAM,UAACO,SAAD,aAAC,EAAaN,YAAYO,YAEhChB,IAAMa,SAASC,qBAAW,CAAEP,OAAQ,EAAGI,YAAa,cAEpDI,GADAhB,EAAQC,IAAMC,WAAWC,MACLE,SAASC,MAAK,SAACC,GAAD,OAAoB,IAAbA,EAAEC,UAC3CC,OAAM,UAACO,SAAD,aAAC,EAAaJ,aAAaC,KAAK,YAEtCZ,IAAMa,SACJC,qBAAW,CAAEP,OAAQ,EAAGI,YAAa,YAAaF,YAAY,KAGhE,IAAMQ,GADNlB,EAAQC,IAAMC,WAAWC,MACQE,SAASC,MAAK,SAACC,GAAD,OAAoB,IAAbA,EAAEC,UAGxDC,OAAOS,GAAoBC,sBAA3B,sIAUAV,OAAOS,GAAoBE,QAAQhB","file":"static/js/47.92ffb614.chunk.js","sourcesContent":["import { store } from 'app/store';\nimport { updateToDo } from '../toDoSlice';\n\ntest('updateToDo test', () => {\n  // this will set a breakpoint when you debug this test in your browser\n  debugger;\n  let state = store.getState().toDo;\n  const originalToDo = state.toDoList.find((p) => p.toDoId === 1);\n  expect(originalToDo?.isComplete).toBeTruthy();\n  expect(originalToDo?.description).toBe('eat tacos');\n\n  store.dispatch(updateToDo({ toDoId: 1, isComplete: false }));\n  state = store.getState().toDo;\n  let changedToDo = state.toDoList.find((p) => p.toDoId === 1);\n  expect(changedToDo?.isComplete).toBeFalsy();\n\n  store.dispatch(updateToDo({ toDoId: 1, description: 'be merry' }));\n  state = store.getState().toDo;\n  changedToDo = state.toDoList.find((p) => p.toDoId === 1);\n  expect(changedToDo?.description).toBe('be merry');\n\n  store.dispatch(\n    updateToDo({ toDoId: 1, description: 'eat tacos', isComplete: true }),\n  );\n  state = store.getState().toDo;\n  const backToOriginalToDo = state.toDoList.find((p) => p.toDoId === 1);\n\n  // snapshots can be objects\n  expect(backToOriginalToDo).toMatchInlineSnapshot(`\n    Object {\n      \"description\": \"eat tacos\",\n      \"isComplete\": true,\n      \"profileId\": 1,\n      \"toDoId\": 1,\n    }\n  `);\n\n  // deep object equality\n  expect(backToOriginalToDo).toEqual(originalToDo);\n});\n"],"sourceRoot":""}