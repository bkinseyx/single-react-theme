{"version":3,"sources":["features/userCard/helpers/userTemplate.ts","features/userCard/userSlice.ts","features/profileCard/profileSlice.ts","features/toDoCard/toDoSlice.ts","app/rootReducer.ts","app/store.ts","features/profileCard/helpers/profileTemplate.ts","features/toDoCard/helpers/toDoTemplate.ts","features/reduxDemo/reduxDemoSlice.ts","features/profileCard/reducers/createProfileReducer.ts","features/profileCard/reducers/deleteProfileReducer.ts","features/profileCard/reducers/updateProfileReducer.ts","features/profileCard/reducers/setActiveProfileReducer.ts","features/profileCard/reducers/resetReducer.ts","features/toDoCard/reducers/createToDoReducer.ts","features/toDoCard/reducers/deleteToDoReducer.ts","features/toDoCard/reducers/updateToDoReducer.ts","features/toDoCard/reducers/resetReducer.ts","features/toDoCard/reducers/setErrorMessageReducer.ts","features/userCard/reducers/createUserReducer.ts","features/userCard/reducers/deleteUserReducer.ts","features/userCard/reducers/updateUserReducer.ts","features/userCard/reducers/setEditUserReducer.ts","features/userCard/reducers/getUsersBeginReducer.ts","features/userCard/reducers/getUsersSuccessReducer.ts","features/userCard/reducers/getUsersFailureReducer.ts","features/userCard/reducers/resetEditFormReducer.ts","features/userCard/reducers/setFormData.ts","features/userCard/reducers/cancelEditFormReducer.ts","features/userCard/reducers/getUserBeginReducer.ts","features/userCard/reducers/getUserSuccessReducer.ts","features/userCard/reducers/getUserFailureReducer.ts","features/userCard/reducers/saveUserBeginReducer.ts","features/userCard/reducers/saveUserSuccessReducer.ts","features/userCard/reducers/saveUserFailureReducer.ts","features/userCard/reducers/resetReducer.ts","index.tsx"],"names":["emptyUser","schema","type","required","properties","firstName","title","lastName","screenName","emailAddress","format","createUserSchema","password1","password2","updateUserSchema","newPassword1","newPassword2","initialState","users","loading","saving","error","editForm","formKey","Date","now","serverError","serverSuccessMessage","submitting","uiSchema","userSlice","createSlice","name","reducers","createUser","createUserReducer","deleteUser","deleteUserReducer","updateUser","updateUserReducer","editUser","editUserReducer","getUsersBegin","getUsersBeginReducer","getUsersSuccess","getUsersSuccessReducer","getUsersFailure","getUsersFailureReducer","getUserBegin","getUserBeginReducer","getUserSuccess","getUserSuccessReducer","getUserFailure","getUserFailureReducer","resetEditForm","resetEditFormReducer","cancelEditForm","cancelEditFormReducer","setFormData","setFormDataReducer","saveUserBegin","saveUserBeginReducer","saveUserSuccess","saveUserSuccessReducer","saveUserFailure","saveUserFailureReducer","reset","resetReducer","actions","profileList","profileId","profileType","showToDoList","maxProfileId","profileTypes","profileSlice","createProfile","createProfileReducer","deleteProfile","deleteProfileReducer","updateProfile","updateProfileReducer","setActiveProfile","setActiveProfileReducer","toDoList","toDoId","description","isComplete","maxToDoId","toDoSlice","createToDo","createToDoReducer","deleteToDo","deleteToDoReducer","updateToDo","updateToDoReducer","setErrorMessage","setErrorMessageReducer","rootReducer","combineReducers","reduxDemo","counterReducer","profile","profileReducer","toDo","toDoReducer","user","userReducer","store","configureStore","reducer","emptyProfile","emptyToDo","counterSlice","value","increment","state","decrement","incrementByAmount","action","payload","incrementAsync","amount","dispatch","setTimeout","selectCount","push","activeProfileId","index","findIndex","splice","undefined","find","existingProfile","Object","assign","_state","_action","existingToDo","errorMessage","data","userId","existingUser","console","log","u","window","initThemeReact","a","App","default","document","querySelectorAll","forEach","el","innerHTML","reactApp","getAttribute","rawReactConfig","reactConfig","JSON","parse","ReactDOM","render","StrictMode","reactAutoInit"],"mappings":"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","file":"static/js/main.e02dfedd.chunk.js","sourcesContent":["import { User } from '../userSlice';\n\nexport const emptyUser: User = {};\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { createUserReducer } from './reducers/createUserReducer';\nimport { deleteUserReducer } from './reducers/deleteUserReducer';\nimport { updateUserReducer } from './reducers/updateUserReducer';\nimport { editUserReducer } from './reducers/setEditUserReducer';\nimport { getUsersBeginReducer } from './reducers/getUsersBeginReducer';\nimport { getUsersSuccessReducer } from './reducers/getUsersSuccessReducer';\nimport { getUsersFailureReducer } from './reducers/getUsersFailureReducer';\nimport { resetEditFormReducer } from './reducers/resetEditFormReducer';\nimport { setFormDataReducer } from './reducers/setFormData';\nimport { cancelEditFormReducer } from './reducers/cancelEditFormReducer';\nimport { getUserBeginReducer } from './reducers/getUserBeginReducer';\nimport { getUserSuccessReducer } from './reducers/getUserSuccessReducer';\nimport { getUserFailureReducer } from './reducers/getUserFailureReducer';\nimport { saveUserBeginReducer } from './reducers/saveUserBeginReducer';\nimport { saveUserSuccessReducer } from './reducers/saveUserSuccessReducer';\nimport { saveUserFailureReducer } from './reducers/saveUserFailureReducer';\nimport { resetReducer } from './reducers/resetReducer';\n\nexport interface User {\n  userId?: string;\n  firstName?: string;\n  middleName?: string;\n  lastName?: string;\n  emailAddress?: string;\n  screenName?: string;\n}\n\nconst schema = {\n  type: 'object',\n  required: ['firstName', 'lastName', 'screenName', 'emailAddress'],\n  properties: {\n    firstName: {\n      type: 'string',\n      title: 'First Name',\n    },\n    lastName: {\n      type: 'string',\n      title: 'Last Name',\n    },\n    screenName: {\n      type: 'string',\n      title: 'Screen Name',\n    },\n    emailAddress: {\n      type: 'string',\n      title: 'Email Address',\n      format: 'emailAddressFormat',\n    },\n  },\n};\n\nexport const createUserSchema = {\n  ...schema,\n  required: [...schema.required, 'password1', 'password2'],\n  properties: {\n    ...schema.properties,\n\n    password1: {\n      type: 'string',\n      title: 'Password',\n    },\n    password2: {\n      type: 'string',\n      title: 'Confirm Password',\n    },\n  },\n};\n\nexport const updateUserSchema = {\n  ...schema,\n  properties: {\n    ...schema.properties,\n    newPassword1: {\n      type: 'string',\n      title: 'Change Password',\n    },\n    newPassword2: {\n      type: 'string',\n      title: 'Confirm Change Password',\n    },\n  },\n};\n\nconst uiSchema = {\n  firstName: {\n    'ui:autofocus': true,\n  },\n  newPassword1: {\n    'ui:widget': 'password',\n  },\n  newPassword2: {\n    'ui:widget': 'password',\n  },\n};\n\nexport interface UserEditForm {\n  formKey: number;\n  data?: User;\n  serverError: null;\n  serverSuccessMessage: null;\n  submitting: false;\n  createUserSchema: {};\n  updateUserSchema: {};\n  uiSchema: {};\n}\n\nexport interface UserState {\n  users: User[];\n  editUser?: User;\n  loading: boolean;\n  saving: boolean;\n  error: string;\n  editForm: UserEditForm;\n}\n\nexport const initialState: UserState = {\n  users: [],\n  loading: false,\n  saving: false,\n  error: '',\n  editForm: {\n    formKey: Date.now(),\n    serverError: null,\n    serverSuccessMessage: null,\n    submitting: false,\n    createUserSchema,\n    updateUserSchema,\n    uiSchema,\n  },\n};\n\nexport const userSlice = createSlice({\n  name: 'User',\n  initialState: initialState as UserState,\n  reducers: {\n    createUser: createUserReducer,\n    deleteUser: deleteUserReducer,\n    updateUser: updateUserReducer,\n    editUser: editUserReducer,\n    getUsersBegin: getUsersBeginReducer,\n    getUsersSuccess: getUsersSuccessReducer,\n    getUsersFailure: getUsersFailureReducer,\n    getUserBegin: getUserBeginReducer,\n    getUserSuccess: getUserSuccessReducer,\n    getUserFailure: getUserFailureReducer,\n    resetEditForm: resetEditFormReducer,\n    cancelEditForm: cancelEditFormReducer,\n    setFormData: setFormDataReducer,\n    saveUserBegin: saveUserBeginReducer,\n    saveUserSuccess: saveUserSuccessReducer,\n    saveUserFailure: saveUserFailureReducer,\n    reset: resetReducer,\n  },\n});\n\nexport const {\n  createUser,\n  deleteUser,\n  updateUser,\n  editUser,\n  getUsersBegin,\n  getUsersSuccess,\n  getUsersFailure,\n  getUserBegin,\n  getUserSuccess,\n  getUserFailure,\n  resetEditForm,\n  cancelEditForm,\n  setFormData,\n  saveUserBegin,\n  saveUserSuccess,\n  saveUserFailure,\n  reset,\n} = userSlice.actions;\n\nexport default userSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { createProfileReducer } from './reducers/createProfileReducer';\nimport { deleteProfileReducer } from './reducers/deleteProfileReducer';\nimport { updateProfileReducer } from './reducers/updateProfileReducer';\nimport { setActiveProfileReducer } from './reducers/setActiveProfileReducer';\n\nimport { resetReducer } from './reducers/resetReducer';\n\nconst profileTypes = ['guest', 'user', 'admin'] as const; // TS 3.4\nexport type ProfileType = typeof profileTypes[number]; // union type\n\nexport interface Profile {\n  profileId: number;\n  name?: string;\n  profileType: ProfileType;\n  showToDoList: boolean;\n}\n\nexport interface ProfileState {\n  profileList: Profile[];\n  maxProfileId: number;\n  profileTypes: ReadonlyArray<ProfileType>;\n  activeProfileId?: number;\n}\n\nexport const initialState: ProfileState = {\n  profileList: [\n    { profileId: 1, name: 'Ben', profileType: 'admin', showToDoList: true },\n    { profileId: 2, name: 'Sue', profileType: 'user', showToDoList: false },\n  ],\n  maxProfileId: 2,\n  profileTypes: profileTypes as ReadonlyArray<ProfileType>,\n};\n\nexport const profileSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    createProfile: createProfileReducer,\n    deleteProfile: deleteProfileReducer,\n    updateProfile: updateProfileReducer,\n    setActiveProfile: setActiveProfileReducer,\n    reset: resetReducer,\n  },\n});\n\nexport const {\n  createProfile,\n  deleteProfile,\n  updateProfile,\n  setActiveProfile,\n  reset,\n} = profileSlice.actions;\n\nexport default profileSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { createToDoReducer } from './reducers/createToDoReducer';\nimport { deleteToDoReducer } from './reducers/deleteToDoReducer';\nimport { updateToDoReducer } from './reducers/updateToDoReducer';\nimport { resetReducer } from './reducers/resetReducer';\nimport { setErrorMessageReducer } from './reducers/setErrorMessageReducer';\n\nexport interface ToDo {\n  toDoId: number;\n  description?: string;\n  profileId: number;\n  isComplete: boolean;\n}\n\nexport interface ToDoState {\n  toDoList: ToDo[];\n  maxToDoId: number;\n  errorMessage?: string;\n}\n\nexport const initialState: ToDoState = {\n  toDoList: [\n    { toDoId: 1, profileId: 1, description: 'eat tacos', isComplete: true },\n    { toDoId: 2, profileId: 1, description: 'drink milk', isComplete: false },\n    {\n      toDoId: 3,\n      profileId: 1,\n      description: 'walk and chew gum',\n      isComplete: false,\n    },\n  ],\n  maxToDoId: 3,\n};\n\nexport const toDoSlice = createSlice({\n  name: 'toDo',\n  initialState,\n  reducers: {\n    createToDo: createToDoReducer,\n    deleteToDo: deleteToDoReducer,\n    updateToDo: updateToDoReducer,\n    setErrorMessage: setErrorMessageReducer,\n    reset: resetReducer,\n  },\n});\n\nexport const {\n  createToDo,\n  deleteToDo,\n  updateToDo,\n  setErrorMessage,\n  reset,\n} = toDoSlice.actions;\n\nexport default toDoSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport counterReducer from '../features/reduxDemo/reduxDemoSlice';\r\nimport profileReducer from '../features/profileCard/profileSlice';\r\nimport toDoReducer from '../features/toDoCard/toDoSlice';\r\nimport userReducer from '../features/userCard/userSlice';\r\n\r\nexport const rootReducer = combineReducers({\r\n  reduxDemo: counterReducer,\r\n  profile: profileReducer,\r\n  toDo: toDoReducer,\r\n  user: userReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\n\r\nimport { rootReducer } from './rootReducer';\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n  module.hot.accept('./rootReducer', async () => {\r\n    const newRootReducer = (await import('./rootReducer')).default;\r\n    store.replaceReducer(newRootReducer);\r\n  });\r\n}\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import { Profile } from '../profileSlice';\nimport { WithRequired, WithOptional } from 'app/utils/typeUtils';\n\nexport type ProfileTemplateFields = 'showToDoList' | 'profileType';\n\nexport type EmptyProfile = WithRequired<Profile, ProfileTemplateFields>;\n\nexport const emptyProfile: EmptyProfile = {\n  profileType: 'guest',\n  showToDoList: false,\n};\n\nexport type PartialProfile = WithOptional<\n  Omit<Profile, 'profileId'>,\n  ProfileTemplateFields\n>;\n","import { ToDo } from '../toDoSlice';\nimport { WithRequired, WithOptional } from 'app/utils/typeUtils';\n\ntype ToDoTemplateFields = 'isComplete';\n\nexport type EmptyToDo = WithRequired<ToDo, ToDoTemplateFields>;\n\nexport const emptyToDo: EmptyToDo = {\n  isComplete: false,\n};\n\nexport type PartialToDo = WithOptional<\n  Omit<ToDo, 'toDoId'>,\n  ToDoTemplateFields\n>;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface ReduxDemoState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: ReduxDemoState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'reduxDemo',\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => (dispatch) => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.reduxDemo.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { ProfileState } from '../profileSlice';\nimport { emptyProfile } from '../helpers/profileTemplate';\n\nexport const createProfileReducer = (state: ProfileState): void => {\n  const profileId = ++state.maxProfileId;\n  state.profileList.push({\n    ...emptyProfile,\n    profileId,\n  });\n  state.activeProfileId = profileId;\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ProfileState } from '../profileSlice';\n\nexport const deleteProfileReducer = (\n  state: ProfileState,\n  action: PayloadAction<number>,\n): void => {\n  const index = state.profileList.findIndex(\n    (profile) => profile.profileId === action.payload,\n  );\n  state.profileList.splice(index, 1);\n  if (state.activeProfileId === action.payload) {\n    state.activeProfileId = undefined;\n  }\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ProfileState, Profile } from '../profileSlice';\nimport { WithRequired } from 'app/utils/typeUtils';\n\nexport const updateProfileReducer = (\n  state: ProfileState,\n  action: PayloadAction<WithRequired<Profile, 'profileId'>>\n): void => {\n  const profile = state.profileList.find(\n    (existingProfile) => existingProfile.profileId === action.payload.profileId\n  );\n  /* istanbul ignore next */\n  if (!profile) {\n    return;\n  }\n  Object.assign(profile, action.payload);\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { ProfileState } from '../profileSlice';\n\nexport const setActiveProfileReducer = (\n  state: ProfileState,\n  action: PayloadAction<number | undefined>,\n): void => {\n  state.activeProfileId = action.payload;\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ProfileState, initialState } from '../profileSlice';\n\nexport const resetReducer = (\n  _state: ProfileState,\n  _action: PayloadAction,\n): ProfileState => initialState;\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { ToDoState } from '../toDoSlice';\nimport { emptyToDo } from '../helpers/toDoTemplate';\n\nexport const createToDoReducer = (\n  state: ToDoState,\n  action: PayloadAction<number>,\n): void => {\n  const toDoId = ++state.maxToDoId;\n  state.toDoList.push({\n    ...emptyToDo,\n    profileId: action.payload,\n    toDoId,\n  });\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ToDoState } from '../toDoSlice';\n\nexport const deleteToDoReducer = (\n  state: ToDoState,\n  action: PayloadAction<number>,\n): void => {\n  const index = state.toDoList.findIndex(\n    (toDo) => toDo.toDoId === action.payload,\n  );\n  state.toDoList.splice(index, 1);\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ToDoState, ToDo } from '../toDoSlice';\nimport { WithRequired } from 'app/utils/typeUtils';\n\nexport const updateToDoReducer = (\n  state: ToDoState,\n  action: PayloadAction<WithRequired<ToDo, 'toDoId'>>\n): void => {\n  const toDo = state.toDoList.find(\n    (existingToDo) => existingToDo.toDoId === action.payload.toDoId\n  );\n  /* istanbul ignore next */\n  if (!toDo) {\n    return;\n  }\n  Object.assign(toDo, action.payload);\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ToDoState, initialState } from '../toDoSlice';\n\nexport const resetReducer = (\n  _state: ToDoState,\n  _action: PayloadAction,\n): ToDoState => initialState;\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { ToDoState } from '../toDoSlice';\n\nexport const setErrorMessageReducer = (\n  state: ToDoState,\n  action: PayloadAction<string | undefined>,\n): void => {\n  state.errorMessage = action.payload;\n};\n","import { UserState } from '../userSlice';\nimport { emptyUser } from '../helpers/userTemplate';\n\nexport const createUserReducer = (state: UserState): void => {\n  state.editForm.data = emptyUser;\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { UserState, User } from '../userSlice';\n\nexport const deleteUserReducer = (\n  state: UserState,\n  action: PayloadAction<User>\n): void => {\n  const index = state.users.findIndex(\n    (user) => user.userId === action.payload.userId\n  );\n  state.users.splice(index, 1);\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { UserState, User } from '../userSlice';\nimport { WithRequired } from 'app/utils/typeUtils';\n\nexport const updateUserReducer = (\n  state: UserState,\n  action: PayloadAction<WithRequired<User, 'userId'>>\n): void => {\n  const user = state.users.find(\n    (existingUser) => existingUser.userId === action.payload.userId\n  );\n  /* istanbul ignore next */\n  if (!user) {\n    return;\n  }\n  Object.assign(user, action.payload);\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { UserState, User } from '../userSlice';\n\nexport const editUserReducer = (\n  state: UserState,\n  action: PayloadAction<User>\n): void => {\n  state.editForm.data = action.payload;\n};\n","import { UserState } from '../userSlice';\n\nexport const getUsersBeginReducer = (state: UserState): void => {\n  state.loading = true;\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { UserState, User } from '../userSlice';\n\nexport const getUsersSuccessReducer = (\n  state: UserState,\n  action: PayloadAction<User[]>\n): void => {\n  console.log('here!!');\n  state.users = action.payload;\n  state.loading = false;\n};\n","import { UserState } from '../userSlice';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport const getUsersFailureReducer = (\n  state: UserState,\n  action: PayloadAction<string>\n): void => {\n  state.error = action.payload;\n  state.loading = false;\n};\n","import { UserState } from '../userSlice';\nimport { emptyUser } from '../helpers/userTemplate';\n\nexport const resetEditFormReducer = (state: UserState): void => {\n  state.editForm.data = state.editForm.data?.userId\n    ? state?.users.find((u) => u.userId === state.editForm.data?.userId) ??\n      emptyUser\n    : emptyUser;\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { UserState, User } from '../userSlice';\n\nexport const setFormDataReducer = (\n  state: UserState,\n  action: PayloadAction<User>\n): void => {\n  console.log('update user reducer');\n};\n","import { UserState } from '../userSlice';\n\nexport const cancelEditFormReducer = (state: UserState): void => {\n  state.editForm.data = undefined;\n};\n","import { UserState } from '../userSlice';\n\nexport const getUserBeginReducer = (state: UserState): void => {\n  state.loading = true;\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { UserState, User } from '../userSlice';\n\nexport const getUserSuccessReducer = (\n  state: UserState,\n  action: PayloadAction<User>\n): void => {\n  state.editForm.data = action.payload;\n  state.loading = false;\n};\n","import { UserState } from '../userSlice';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport const getUserFailureReducer = (\n  state: UserState,\n  action: PayloadAction<string>\n): void => {\n  state.error = action.payload;\n  state.loading = false;\n};\n","import { UserState } from '../userSlice';\n\nexport const saveUserBeginReducer = (state: UserState): void => {\n  state.saving = true;\n};\n","import { UserState } from '../userSlice';\n\nexport const saveUserSuccessReducer = (state: UserState): void => {\n  console.log('success save');\n  state.editForm.data = undefined;\n  state.loading = false;\n};\n","import { UserState } from '../userSlice';\nimport { PayloadAction } from '@reduxjs/toolkit';\n\nexport const saveUserFailureReducer = (\n  state: UserState,\n  action: PayloadAction<string>\n): void => {\n  state.error = action.payload;\n  state.saving = false;\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { UserState, initialState } from '../userSlice';\n\nexport const resetReducer = (\n  _state: UserState,\n  _action: PayloadAction\n): UserState => initialState;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    initThemeReact: () => void;\r\n    reactAutoInit: boolean;\r\n  }\r\n}\r\nwindow.initThemeReact = async () => {\r\n  const App = (await import('./App')).default;\r\n\r\n  document.querySelectorAll('[data-react-app]').forEach((el) => {\r\n    // hot module replacement needs to be able to overwrite the div\r\n    if (process.env.NODE_ENV !== 'development' && el.innerHTML) {\r\n      return;\r\n    }\r\n    const reactApp = el.getAttribute('data-react-app');\r\n    const rawReactConfig = el.getAttribute('data-react-config');\r\n    const reactConfig = rawReactConfig ? JSON.parse(rawReactConfig) : {};\r\n    if (!reactApp) {\r\n      return;\r\n    }\r\n    ReactDOM.render(\r\n      <React.StrictMode>\r\n        <Provider store={store}>\r\n          <App reactApp={reactApp} reactConfig={reactConfig} />\r\n        </Provider>\r\n      </React.StrictMode>,\r\n      el\r\n    );\r\n  });\r\n};\r\n\r\nif (window.reactAutoInit) {\r\n  window.initThemeReact();\r\n  window.reactAutoInit = false;\r\n}\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n  module.hot.accept('./App', window.initThemeReact);\r\n}\r\n"],"sourceRoot":""}