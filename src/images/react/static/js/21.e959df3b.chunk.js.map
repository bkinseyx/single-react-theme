{"version":3,"sources":["features/userCard/api/getUserApi.ts","features/userCard/components/UserItem/getEditOnClick.ts","app/utils/liferayUtils.ts"],"names":["getUserApi","user","a","store","dispatch","getUserBegin","executeLiferayService","userId","userDetails","getUserSuccess","getUserFailure","getEditOnClick","event","stopPropagation","liferayServicePromise","createPromise","_resolve","_reject","promise","Promise","resolve","reject","api","data","expectedResultType","window","Liferay","promisifiedLiferayService","postMessage","type","JSON","stringify","updateUserDummyData","oldPassword","newPassword1","newPassword2","passwordReset","reminderQueryQuestion","reminderQueryAnswer","screenName","emailAddress","facebookId","openId","languageId","timeZoneId","greeting","comments","firstName","middleName","lastName","prefixId","suffixId","birthdayMonth","birthdayDay","birthdayYear","smsSn","facebookSn","jabberSn","skypeSn","twitterSn","jobTitle","groupIds","organizationIds","roleIds","userGroupRoles","userGroupIds","male","serviceContext","createUserDummyData","autoPassword","password1","password2","autoScreenName","locale","sendEmail","getLiferayField","fieldName","getFieldFromLiferayObject","liferayFields","localStorage","getItem","parse","addEventListener","result"],"mappings":"uNAYaA,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,mFAKxBC,IAAMC,SAASC,0BALS,kBAOIC,YACxB,uBACA,CAAEC,OAAQN,EAAKM,QACf,UAVoB,OAOhBC,EAPgB,OAYtBL,IAAMC,SAASK,yBAAeD,IAZR,kDActBL,IAAMC,SAASM,yBAAe,EAAD,KAdP,0DAAH,uD,iCCVvB,mEAEaC,EAAiB,SAACV,GAAD,OAAiB,SAC7CW,GAGKX,IAGLD,qBAAWC,GACXW,EAAMC,sB,4KCwCJC,E,wBAdEC,EAAgB,WACpB,IAAIC,EAAUC,EAERC,EAAe,IAAIC,SAAQ,SAASC,EAASC,GACjDL,EAAWI,EACXH,EAAUI,KAMZ,OAHAH,EAAQE,QAAUJ,EAClBE,EAAQG,OAASJ,EAEVC,GAKIZ,EAAqB,uCAAG,WACnCgB,EACAC,EACAC,GAHmC,SAAAtB,EAAA,0DAK/BuB,OAAOC,QALwB,yCAM1BD,OAAOE,0BAA0BL,EAAKC,EAAMC,IANlB,cAQnCC,OAAOG,YACL,CACEC,KAAM,0BACNP,MACAC,KAAMO,KAAKC,UAAUR,GACrBC,sBAEF,KAEFV,EAAwBC,IAjBW,SAkBtBD,EAlBsB,mFAAH,0DA0BrBkB,EAAsB,CACjCC,YAAa,GACbC,aAAc,GACdC,aAAc,GACdC,eAAe,EACfC,sBAAuB,GACvBC,oBAAqB,GACrBC,WAAY,WACZC,aAAc,mBACdC,WAAY,EACZC,OAAQ,GACRC,WAAY,EACZC,WAAY,EACZC,SAAU,GACVC,SAAU,GACVC,UAAW,GACXC,WAAY,GACZC,SAAU,GACVC,SAAU,EACVC,SAAU,EACVC,cAAe,EACfC,YAAa,EACbC,aAAc,KACdC,MAAO,GACPC,WAAY,GACZC,SAAU,GACVC,QAAS,GACTC,UAAW,GACXC,SAAU,SACVC,SAAU,KACVC,gBAAiB,GACjBC,QAAS,GACTC,eAAgB,GAChBC,aAAc,GACdC,MAAM,EACNC,eAAgB,IAGLC,EAAsB,CACjCC,cAAc,EACdC,UAAW,GACXC,UAAW,GACXC,gBAAgB,EAChBjC,WAAY,GACZC,aAAc,GACdC,WAAY,EACZC,OAAQ,GACR+B,OAAQ,QACR1B,UAAW,GACXC,WAAY,GACZC,SAAU,GACVC,SAAU,EACVC,SAAU,EACVe,MAAM,EACNd,cAAe,EACfC,YAAa,EACbC,aAAc,KACdM,SAAU,GACVC,SAAU,KACVC,gBAAiB,KACjBC,QAAS,KACTE,aAAc,KACdS,WAAW,EACXP,eAAgB,IAGLQ,EAAe,uCAAG,WAAOC,GAAP,eAAA1E,EAAA,0DACzBuB,OAAOC,QADkB,yCAEpBD,OAAOoD,0BAA0BD,IAFb,cAIvBE,EAAgBC,aAAaC,QAAQ,iBAJd,kBAKtBlD,KAAKmD,MAAMH,GAAyBF,IALd,2CAAH,sDAQ5BnD,OAAOyD,iBAAiB,WAAW,SAAStE,GAClB,wCAApBA,EAAMW,KAAKM,MACbf,EAAsBM,QAAQR,EAAMW,KAAK4D","file":"static/js/21.e959df3b.chunk.js","sourcesContent":["import { store } from 'app/store';\nimport {\n  promisifiedLiferayService,\n  executeLiferayService,\n} from 'app/utils/liferayUtils';\nimport {\n  getUserBegin,\n  getUserSuccess,\n  getUserFailure,\n  User,\n} from '../userSlice';\n\nexport const getUserApi = async (user: User) => {\n  if (process.env.NODE_ENV === 'development') {\n    store.dispatch(getUserSuccess(user));\n    return;\n  }\n  store.dispatch(getUserBegin());\n  try {\n    const userDetails = await executeLiferayService(\n      '/user/get-user-by-id',\n      { userId: user.userId },\n      'object'\n    );\n    store.dispatch(getUserSuccess(userDetails as User));\n  } catch (error) {\n    store.dispatch(getUserFailure(error));\n  }\n};\n\n// promisifiedLiferayService(\n//   \"/role/get-roles\",\n//   { companyId: Liferay.ThemeDisplay.getCompanyId(), types: [1] },\n//   \"array\"\n// ),\n// promisifiedLiferayService(\n//   \"/role/get-user-roles\",\n//   { userId },\n//   \"array\"\n// )\n","import React from 'react';\nimport { User } from '../../userSlice';\nimport { getUserApi } from 'features/userCard/api/getUserApi';\n\nexport const getEditOnClick = (user?: User) => (\n  event: React.MouseEvent\n): void => {\n  /* istanbul ignore next */\n  if (!user) {\n    return;\n  }\n  getUserApi(user);\n  event.stopPropagation();\n};\n","declare global {\n  interface Window {\n    Liferay: any;\n    getFieldFromLiferayObject: (fieldName: string) => string;\n    promisifiedLiferayService: (\n      api: string,\n      data: {},\n      expectedResultType: string\n    ) => Promise<{}>;\n  }\n}\n\n// This abstracts out most of the error handling and makes invoking api calls\n// inside of redux actions very tight, composable with Promise.all and\n// amenable to modern async-await syntax inside of thunk actions\nexport const promisifiedLiferayService = (\n  api: string,\n  data: {},\n  expectedResultType: any\n) =>\n  new Promise((resolve, reject) => {\n    try {\n      window.Liferay.Service(api, data, (result: any) => {\n        if (typeof result === expectedResultType) {\n          resolve(result);\n        } else if (expectedResultType === 'array' && Array.isArray(result)) {\n          resolve(result);\n        } else if (typeof result === 'string') {\n          reject(result);\n        } else {\n          reject('Unexpected error.');\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n\nconst createPromise = () => {\n  let _resolve, _reject;\n\n  const promise: any = new Promise(function(resolve, reject) {\n    _resolve = resolve;\n    _reject = reject;\n  });\n\n  promise.resolve = _resolve;\n  promise.reject = _reject;\n\n  return promise;\n};\n\nlet liferayServicePromise: any;\n\nexport const executeLiferayService = async (\n  api: string,\n  data: {},\n  expectedResultType: 'string' | 'array' | 'object'\n) => {\n  if (window.Liferay) {\n    return window.promisifiedLiferayService(api, data, expectedResultType);\n  }\n  window.postMessage(\n    {\n      type: 'EXECUTE_LIFERAY_SERVICE',\n      api,\n      data: JSON.stringify(data),\n      expectedResultType,\n    },\n    '*'\n  );\n  liferayServicePromise = createPromise();\n  return await liferayServicePromise;\n  // return {\n  //   string: '',\n  //   array: [],\n  //   object: {},\n  // }[expectedResultType];\n};\n\nexport const updateUserDummyData = {\n  oldPassword: '',\n  newPassword1: '',\n  newPassword2: '',\n  passwordReset: false,\n  reminderQueryQuestion: '',\n  reminderQueryAnswer: '',\n  screenName: 'not_null',\n  emailAddress: 'test@example.com',\n  facebookId: 0,\n  openId: '', // this is weird: only id field here that takes a string instead of an int\n  languageId: 0,\n  timeZoneId: 0,\n  greeting: '',\n  comments: '',\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  prefixId: 0,\n  suffixId: 0,\n  birthdayMonth: 1,\n  birthdayDay: 1,\n  birthdayYear: 1970,\n  smsSn: '',\n  facebookSn: '',\n  jabberSn: '',\n  skypeSn: '',\n  twitterSn: '',\n  jobTitle: 'tester',\n  groupIds: null,\n  organizationIds: [],\n  roleIds: [],\n  userGroupRoles: [],\n  userGroupIds: [],\n  male: true,\n  serviceContext: {},\n};\n\nexport const createUserDummyData = {\n  autoPassword: false,\n  password1: '', //\n  password2: '', //\n  autoScreenName: false,\n  screenName: '', //\n  emailAddress: '', //\n  facebookId: 0,\n  openId: '',\n  locale: 'en_US',\n  firstName: '', //\n  middleName: '', //\n  lastName: '', //\n  prefixId: 0,\n  suffixId: 0,\n  male: true,\n  birthdayMonth: 1,\n  birthdayDay: 1,\n  birthdayYear: 1970,\n  jobTitle: '',\n  groupIds: null,\n  organizationIds: null,\n  roleIds: null,\n  userGroupIds: null,\n  sendEmail: false,\n  serviceContext: {},\n};\n\nexport const getLiferayField = async (fieldName: string): Promise<string> => {\n  if (window.Liferay) {\n    return window.getFieldFromLiferayObject(fieldName);\n  }\n  const liferayFields = localStorage.getItem('liferayFields');\n  return JSON.parse(liferayFields as string)[fieldName];\n};\n\nwindow.addEventListener('message', function(event) {\n  if (event.data.type === 'LOCAL_RETURN_LIFERAY_SERVICE_RESULT') {\n    liferayServicePromise.resolve(event.data.result);\n  }\n});\n"],"sourceRoot":""}