{"version":3,"sources":["features/toDoCard/components/ToDoItem/ToDoItem.test.tsx","app/components/CustomTextInput/CustomTextInput.tsx","features/toDoCard/components/ToDoItem/getDescriptionOnChange.ts","features/toDoCard/components/ToDoItem/getDeleteOnClick.ts","features/toDoCard/components/ToDoItem/getIsCompleteOnChange.ts","features/toDoCard/components/ToDoItem/ToDoItem.module.css","app/components/CustomCheckbox/CustomCheckbox.tsx","features/toDoCard/components/ToDoItem/ToDoItem.tsx","app/components/CustomCheckbox/CustomCheckbox.module.css"],"names":["renderItem","toDo","render","store","getToDo","toDoId","getState","toDoList","find","p","expect","not","toBeUndefined","test","asFragment","toMatchSnapshot","rerender","textInput","screen","getByLabelText","toHaveValue","fireEvent","change","target","value","toMatchInlineSnapshot","dispatch","reset","isCompleteCheckbox","toBeChecked","click","CustomTextInput","onChange","label","idPrefix","autoFocus","inputId","htmlFor","id","type","className","event","getDescriptionOnChange","description","updateToDo","getDeleteOnClick","deleteToDo","getIsCompleteOnChange","isComplete","module","exports","CustomCheckbox","checked","styles","checkbox","ToDoItem","emptyToDo","toDoItem","buttonWrapper","onClick"],"mappings":"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","file":"static/js/9.4eafbf65.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  render,\n  screen,\n  fireEvent,\n  RenderResult,\n} from '@testing-library/react';\nimport { Provider } from 'react-redux';\n\nimport { store } from 'app/store';\nimport { ToDoItem } from './ToDoItem';\nimport { ToDo, reset } from 'features/toDoCard/toDoSlice';\n\nconst renderItem = (toDo: ToDo): RenderResult =>\n  // the ToDoItem component is now \"reduxified\"\n  render(\n    <Provider store={store}>\n      <ToDoItem toDo={toDo} />\n    </Provider>,\n  );\n\nconst getToDo = (toDoId: number): ToDo => {\n  const toDo = store.getState().toDo.toDoList.find((p) => p.toDoId === toDoId);\n  expect(toDo).not.toBeUndefined();\n  // typescript doesn't understand that ToDo must be defined here, so we explicitly cast\n  return toDo as ToDo;\n};\n\ntest('renders ToDoItem', () => {\n  const toDo = getToDo(1);\n  const { asFragment } = renderItem(toDo);\n  expect(asFragment()).toMatchSnapshot();\n});\n\ntest('ToDoItem description field', () => {\n  let toDo = getToDo(1);\n  const { asFragment, rerender } = renderItem(toDo);\n  let textInput = screen.getByLabelText('Description');\n  expect(textInput).toHaveValue('eat tacos');\n  fireEvent.change(textInput, { target: { value: 'live, laugh, love' } });\n\n  textInput = screen.getByLabelText('Description');\n  toDo = getToDo(1);\n  expect(toDo).toMatchInlineSnapshot(`\n    Object {\n      \"description\": \"live, laugh, love\",\n      \"isComplete\": true,\n      \"profileId\": 1,\n      \"toDoId\": 1,\n    }\n  `);\n\n  // it is necessary to reduxify the component when you rerender also\n  rerender(\n    <Provider store={store}>\n      <ToDoItem toDo={toDo} />\n    </Provider>,\n  );\n  expect(textInput).toHaveValue('live, laugh, love');\n  expect(asFragment()).toMatchSnapshot();\n});\n\ntest('ToDoItem isComplete field', () => {\n  // Whenever you do multiple redux tests in the same file, it's best practice to reset the state.\n  // Otherwise the state from a previous test could bleed into a new one and cause unexpected issues.\n  store.dispatch(reset());\n  let toDo = getToDo(1);\n  const { asFragment, rerender } = renderItem(toDo);\n\n  // It's best practice to get an element the same way a real user would get an element.\n  // In this case by the label text.\n  const isCompleteCheckbox = screen.getByLabelText(/complete/i);\n  expect(isCompleteCheckbox).toBeChecked();\n\n  // this is how we check/uncheck a checkbox\n  fireEvent.click(isCompleteCheckbox);\n  toDo = getToDo(1);\n  expect(toDo).toMatchInlineSnapshot(`\n    Object {\n      \"description\": \"eat tacos\",\n      \"isComplete\": false,\n      \"profileId\": 1,\n      \"toDoId\": 1,\n    }\n  `);\n\n  // it is necessary to reduxify the component when you rerender also\n  rerender(\n    <Provider store={store}>\n      <ToDoItem toDo={toDo} />\n    </Provider>,\n  );\n  expect(isCompleteCheckbox).not.toBeChecked();\n  expect(asFragment()).toMatchSnapshot();\n});\n","import React from 'react';\n\ninterface CustomTextInputProps {\n  onChange: (value: string) => void;\n  value?: string;\n  label: string;\n  idPrefix: string;\n  autoFocus?: boolean;\n}\n\nexport const CustomTextInput: React.FC<CustomTextInputProps> = ({\n  value,\n  onChange,\n  label,\n  idPrefix,\n  autoFocus,\n}) => {\n  const inputId = `${idPrefix}-input`;\n\n  return (\n    <div>\n      <label htmlFor={inputId}>{label}</label>\n      <input\n        id={inputId}\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(event): void => onChange(event.target.value)}\n        autoFocus={autoFocus}\n      />\n    </div>\n  );\n};\n","import { updateToDo } from '../../toDoSlice';\nimport { store } from 'app/store';\n\nexport const getDescriptionOnChange = (toDoId?: number) => (\n  description: string,\n): void => {\n  /* istanbul ignore next */\n  if (!toDoId) {\n    return;\n  }\n  store.dispatch(\n    updateToDo({\n      toDoId,\n      description,\n    }),\n  );\n};\n","import { deleteToDo } from '../../toDoSlice';\nimport { store } from 'app/store';\n\nexport const getDeleteOnClick = (toDoId?: number) => (): void => {\n  /* istanbul ignore next */\n  if (!toDoId) {\n    return;\n  }\n  store.dispatch(deleteToDo(toDoId));\n};\n","import { updateToDo } from '../../toDoSlice';\nimport { store } from 'app/store';\n\nexport const getIsCompleteOnChange = (toDoId?: number) => (\n  isComplete: boolean,\n): void => {\n  /* istanbul ignore next */\n  if (!toDoId) {\n    return;\n  }\n  store.dispatch(\n    updateToDo({\n      toDoId,\n      isComplete,\n    }),\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toDoItem\":\"ToDoItem_toDoItem__1I-c8\",\"buttonWrapper\":\"ToDoItem_buttonWrapper__1GahE\"};","import React from 'react';\n\nimport styles from './CustomCheckbox.module.css';\n\ninterface CustomCheckboxProps {\n  onChange: (value: boolean) => void;\n  checked?: boolean;\n  label: string;\n  idPrefix: string;\n  autoFocus?: boolean;\n}\n\nexport const CustomCheckbox: React.FC<CustomCheckboxProps> = ({\n  checked,\n  onChange,\n  label,\n  idPrefix,\n  autoFocus,\n}) => {\n  const inputId = `${idPrefix}-input`;\n\n  return (\n    <div>\n      <label htmlFor={inputId}>{label}</label>\n      <input\n        id={inputId}\n        type=\"checkbox\"\n        className={`form-control ${styles.checkbox}`}\n        checked={checked}\n        onChange={(event): void => onChange(event.target.checked)}\n        autoFocus={autoFocus}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport styles from './ToDoItem.module.css';\n\nimport { ToDo } from '../../toDoSlice';\nimport { CustomTextInput } from 'app/components/CustomTextInput/CustomTextInput';\nimport { emptyToDo } from '../../helpers/toDoTemplate';\nimport { getDescriptionOnChange } from './getDescriptionOnChange';\nimport { getDeleteOnClick } from './getDeleteOnClick';\nimport { getIsCompleteOnChange } from './getIsCompleteOnChange';\nimport { CustomCheckbox } from 'app/components/CustomCheckbox/CustomCheckbox';\n\ninterface ToDoProps {\n  toDo: ToDo;\n}\n\nexport const ToDoItem: React.FC<ToDoProps> = ({ toDo = emptyToDo }) => {\n  return (\n    <li className={'list-group-item ' + styles.toDoItem}>\n      <CustomCheckbox\n        idPrefix={`isComplete-${toDo.toDoId}`}\n        label={'Complete?'}\n        checked={toDo.isComplete}\n        onChange={getIsCompleteOnChange(toDo.toDoId)}\n      />\n      <CustomTextInput\n        idPrefix={`description-${toDo.toDoId}`}\n        label={'Description'}\n        value={toDo.description}\n        onChange={getDescriptionOnChange(toDo.toDoId)}\n      />\n      <div className={styles.buttonWrapper}>\n        <button\n          className=\"btn btn-danger\"\n          onClick={getDeleteOnClick(toDo.toDoId)}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"CustomCheckbox_checkbox__3dmq1\"};"],"sourceRoot":""}