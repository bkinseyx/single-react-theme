{"version":3,"sources":["features/profileCard/selectors/profileTypesSelector.ts","features/profileCard/selectors/isActiveSelector.ts","features/profileCard/components/ProfileItem/getNameOnChange.ts","features/profileCard/components/ProfileItem/getTypeOnChange.ts","features/profileCard/components/ProfileItem/getItemOnClick.ts","features/profileCard/components/ProfileItem/getDeleteOnClick.ts","features/profileCard/components/ProfileItem/ProfileItem.module.css","app/components/CustomSelect/CustomSelect.tsx","features/profileCard/components/ProfileItem/ProfileItem.tsx","features/profileCard/selectors/profileListSelector.ts","features/profileCard/components/ProfileCard/getCreateOnClick.ts","features/profileCard/components/ProfileCard/ProfileCard.tsx","features/profileCard/components/ProfileCard/ProfileCard.test.tsx","../node_modules/classnames/index.js","app/components/CardFooterWrapper/CardFooterWrapper.tsx","app/components/CustomTextInput/CustomTextInput.tsx","app/components/CardFooterWrapper/CardFooterWrapper.module.css"],"names":["profileTypesSelector","state","profile","profileTypes","getIsActiveSelector","activeProfileId","profileId","getNameOnChange","name","store","dispatch","updateProfile","getTypeOnChange","value","profileType","getItemOnClick","setActiveProfile","getDeleteOnClick","event","deleteProfile","stopPropagation","module","exports","CustomSelect","options","onChange","label","idPrefix","selectId","htmlFor","id","className","target","map","option","key","ProfileItem","emptyProfile","useSelector","isActive","classNames","styles","profileItem","active","onClick","CustomTextInput","autoFocus","buttonWrapper","profileListSelector","profileList","getCreateOnClick","createProfile","ProfileCard","reactConfig","role","aria-label","title","renderCard","render","test","asFragment","expect","toMatchSnapshot","screen","getByLabelText","toBeInTheDocument","getByRole","profileListItems","within","getAllByRole","toHaveLength","rerender","deleteButton","getByText","fireEvent","click","reset","createButton","lastItem","toHaveValue","hasOwn","hasOwnProperty","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","call","join","default","CardFooterWrapper","children","wrapper","inputId","type"],"mappings":"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","file":"static/js/6.27ecef48.chunk.js","sourcesContent":["import { RootState } from 'app/rootReducer';\n\nexport const profileTypesSelector = (state: RootState): string[] =>\n  state.profile.profileTypes as string[];\n","import { RootState } from 'app/rootReducer';\nimport { Profile } from '../profileSlice';\nimport { ProfileTemplateFields } from '../helpers/profileTemplate';\nimport { WithRequired } from 'app/utils/typeUtils';\n\nexport const getIsActiveSelector = (\n  profile: WithRequired<Profile, ProfileTemplateFields>\n) => (state: RootState): boolean =>\n  state.profile.activeProfileId === profile.profileId;\n","import { store } from 'app/store';\nimport { updateProfile } from '../../profileSlice';\n\nexport const getNameOnChange = (profileId?: number) => (name: string): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(\n    updateProfile({\n      profileId,\n      name,\n    }),\n  );\n};\n","import { store } from 'app/store';\nimport { updateProfile, ProfileType } from '../../profileSlice';\n\nexport const getTypeOnChange = (profileId?: number) => (\n  value: string,\n): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(\n    updateProfile({\n      profileId,\n      profileType: value as ProfileType,\n    }),\n  );\n};\n","import { store } from 'app/store';\nimport { setActiveProfile } from '../../profileSlice';\n\nexport const getItemOnClick = (profileId?: number) => (): void => {\n  store.dispatch(setActiveProfile(profileId));\n};\n","import React from 'react';\nimport { store } from 'app/store';\nimport { deleteProfile } from '../../profileSlice';\n\nexport const getDeleteOnClick = (profileId?: number) => (\n  event: React.MouseEvent,\n): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(deleteProfile(profileId));\n  event.stopPropagation();\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileItem\":\"ProfileItem_profileItem___Vthf\",\"buttonWrapper\":\"ProfileItem_buttonWrapper__Un2Su\"};","import React from 'react';\n\ninterface CustomSelectProps {\n  onChange: (value: string) => void;\n  options: string[];\n  value: string;\n  label: string;\n  idPrefix: string;\n}\n\nexport const CustomSelect: React.FC<CustomSelectProps> = ({\n  options,\n  value,\n  onChange,\n  label,\n  idPrefix,\n}) => {\n  const selectId = `${idPrefix}-select`;\n  return (\n    <div>\n      <label htmlFor={selectId}>{label}</label>\n      <select\n        id={selectId}\n        value={value}\n        className=\"form-control\"\n        onChange={(event): void => onChange(event?.target.value)}\n      >\n        {options.map((option) => (\n          <option key={option}>{option}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styles from './ProfileItem.module.css';\nimport classNames from 'classnames';\n\nimport { Profile } from '../../profileSlice';\nimport { CustomSelect } from 'app/components/CustomSelect/CustomSelect';\nimport { CustomTextInput } from 'app/components/CustomTextInput/CustomTextInput';\nimport { emptyProfile } from '../../helpers/profileTemplate';\nimport { profileTypesSelector } from '../../selectors/profileTypesSelector';\nimport { getIsActiveSelector } from '../../selectors/isActiveSelector';\nimport { getNameOnChange } from './getNameOnChange';\nimport { getTypeOnChange } from './getTypeOnChange';\nimport { getItemOnClick } from './getItemOnClick';\nimport { getDeleteOnClick } from './getDeleteOnClick';\n\ninterface ProfileProps {\n  profile: Profile;\n}\n\nexport const ProfileItem: React.FC<ProfileProps> = ({\n  profile = emptyProfile,\n}) => {\n  const profileTypes = useSelector(profileTypesSelector);\n  const isActive = useSelector(getIsActiveSelector(profile));\n\n  return (\n    <li\n      className={classNames('list-group-item', styles.profileItem, {\n        active: isActive,\n      })}\n      onClick={getItemOnClick(profile.profileId)}\n    >\n      <CustomTextInput\n        idPrefix={`name-${profile.profileId}`}\n        label={'Name'}\n        value={profile.name}\n        onChange={getNameOnChange(profile.profileId)}\n        autoFocus={isActive}\n      />\n      <CustomSelect\n        idPrefix={`type-${profile.profileId}`}\n        label={'Type'}\n        value={profile.profileType}\n        options={profileTypes}\n        onChange={getTypeOnChange(profile.profileId)}\n      />\n      <div className={styles.buttonWrapper}>\n        <button\n          className=\"btn btn-danger\"\n          onClick={getDeleteOnClick(profile.profileId)}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n","import { RootState } from 'app/rootReducer';\nimport { Profile } from '../profileSlice';\n\nexport const profileListSelector = (state: RootState): Profile[] =>\n  state.profile.profileList;\n","import { store } from 'app/store';\nimport { createProfile } from '../../profileSlice';\n\nexport const getCreateOnClick = () => (): void => {\n  store.dispatch(createProfile());\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { ProfileItem } from '../ProfileItem/ProfileItem';\nimport { profileListSelector } from '../../selectors/profileListSelector';\nimport { getCreateOnClick } from './getCreateOnClick';\nimport { CardFooterWrapper } from 'app/components/CardFooterWrapper/CardFooterWrapper';\nimport { TopLevelComponent } from 'app/utils/typeUtils';\n\ninterface ProfileCardProps {\n  reactConfig?: {\n    title?: string;\n  };\n}\nexport const ProfileCard: TopLevelComponent<ProfileCardProps> = ({\n  reactConfig,\n}) => {\n  const profileList = useSelector(profileListSelector);\n  return (\n    <div className=\"card\" role=\"main\" aria-label=\"Profile Card\">\n      <div className=\"card-header\">\n        <h5 className=\"card-title\">{reactConfig?.title}</h5>\n      </div>\n      <div className=\"card-body\">\n        <ul className=\"list-group\">\n          {profileList.map((profile) => (\n            <ProfileItem\n              key={profile.profileId}\n              profile={profile}\n            ></ProfileItem>\n          ))}\n        </ul>\n      </div>\n      <div className=\"card-footer\">\n        <CardFooterWrapper>\n          <button className=\"btn btn-primary\" onClick={getCreateOnClick()}>\n            Create New Profile\n          </button>\n        </CardFooterWrapper>\n      </div>\n    </div>\n  );\n};\nexport default ProfileCard;\n","/* eslint-disable max-lines-per-function */\nimport React from 'react';\nimport {\n  render,\n  screen,\n  within,\n  RenderResult,\n  fireEvent,\n} from '@testing-library/react';\nimport { Provider } from 'react-redux';\n\nimport { store } from 'app/store';\nimport { ProfileCard } from './ProfileCard';\nimport { reset } from '../../profileSlice';\n\nconst renderCard = (): RenderResult =>\n  render(\n    <Provider store={store}>\n      <ProfileCard />\n    </Provider>,\n  );\n\ntest('renders the Profile Card', () => {\n  const { asFragment } = renderCard();\n  expect(asFragment()).toMatchSnapshot();\n  expect(screen.getByLabelText(/profile card/i)).toBeInTheDocument();\n  const profileList = screen.getByRole('list');\n  expect(profileList).toBeInTheDocument();\n  const profileListItems = within(profileList).getAllByRole('listitem');\n  expect(profileListItems).toHaveLength(2);\n});\n\ntest('test delete button', () => {\n  const { rerender, asFragment } = renderCard();\n  const profileList = screen.getByRole('list');\n  let profileListItems = within(profileList).getAllByRole('listitem');\n  const deleteButton = within(profileListItems[0]).getByText(/delete/i);\n  fireEvent.click(deleteButton);\n  rerender(\n    <Provider store={store}>\n      <ProfileCard />\n    </Provider>,\n  );\n  profileListItems = within(profileList).getAllByRole('listitem');\n  expect(profileListItems).toHaveLength(1);\n  expect(asFragment()).toMatchSnapshot();\n});\n\ntest('test create button', () => {\n  store.dispatch(reset());\n  const { rerender, asFragment } = renderCard();\n  const createButton = screen.getByText(/create/i);\n  const profileList = screen.getByRole('list');\n  let profileListItems = within(profileList).getAllByRole('listitem');\n  expect(profileListItems).toHaveLength(2);\n  fireEvent.click(createButton);\n  rerender(\n    <Provider store={store}>\n      <ProfileCard />\n    </Provider>,\n  );\n  profileListItems = within(profileList).getAllByRole('listitem');\n  expect(profileListItems).toHaveLength(3);\n  expect(asFragment()).toMatchSnapshot();\n  const lastItem = profileListItems[2];\n  expect(within(lastItem).getByLabelText('Name')).toHaveValue('');\n  expect(within(lastItem).getByLabelText('Type')).toHaveValue('guest');\n});\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from 'react';\nimport styles from './CardFooterWrapper.module.css';\n\nexport const CardFooterWrapper: React.FC = ({ children }) => (\n  <div className={styles.wrapper}>{children}</div>\n);\n","import React from 'react';\n\ninterface CustomTextInputProps {\n  onChange: (value: string) => void;\n  value?: string;\n  label: string;\n  idPrefix: string;\n  autoFocus?: boolean;\n}\n\nexport const CustomTextInput: React.FC<CustomTextInputProps> = ({\n  value,\n  onChange,\n  label,\n  idPrefix,\n  autoFocus,\n}) => {\n  const inputId = `${idPrefix}-input`;\n\n  return (\n    <div>\n      <label htmlFor={inputId}>{label}</label>\n      <input\n        id={inputId}\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(event): void => onChange(event.target.value)}\n        autoFocus={autoFocus}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CardFooterWrapper_wrapper__1sA5G\"};"],"sourceRoot":""}