{"version":3,"sources":["features/userCard/api/saveUserApi.ts","app/utils/liferayUtils.ts","features/userCard/api/getUsersApi.ts"],"names":["saveUserApi","user","a","store","dispatch","saveUserBegin","promisifiedLiferayService","userId","updateUserDummyData","createUserDummyData","companyId","window","Liferay","ThemeDisplay","getCompanyId","groupIds","getGroupId","saveUserSuccess","getUsersApi","saveUserFailure","api","data","expectedResultType","Promise","resolve","reject","Service","result","Array","isArray","error","oldPassword","newPassword1","newPassword2","passwordReset","reminderQueryQuestion","reminderQueryAnswer","screenName","emailAddress","facebookId","openId","languageId","timeZoneId","greeting","comments","firstName","middleName","lastName","prefixId","suffixId","birthdayMonth","birthdayDay","birthdayYear","smsSn","facebookSn","jabberSn","skypeSn","twitterSn","jobTitle","organizationIds","roleIds","userGroupRoles","userGroupIds","autoPassword","password1","password2","autoScreenName","locale","male","sendEmail","serviceContext","getScopeGroupId","getUsersBegin","groupId","users","getUsersSuccess","getUsersFailure"],"mappings":"uOAeaA,EAAW,uCAAG,WAAOC,GAAP,SAAAC,EAAA,4FAMvBC,IAAMC,SAASC,2BANQ,SAOjBC,YACJL,EAAKM,OAAS,oBAAsB,iBADP,YAAC,eAGxBN,EAAKM,OAASC,IAAsBC,KAHb,IAI3BC,UAAWC,OAAOC,QAAQC,aAAaC,eACvCC,SAAU,CAACC,gBACRf,GAEL,UAfqB,OAiBvBE,IAAMC,SAASa,6BACfC,wBAlBuB,kDAoBvBf,IAAMC,SAASe,0BAAgB,EAAD,KApBP,0DAAH,uD,gCCTxB,wIAGO,IAAMb,EAA4B,SACvCc,EACAC,EACAC,GAHuC,OAKvC,IAAIC,SAAQ,SAACC,EAASC,GACpB,IACEd,OAAOC,QAAQc,QAAQN,EAAKC,GAAM,SAACM,UACtBA,IAAWL,GAEY,UAAvBA,GAAkCM,MAAMC,QAAQF,GADzDH,EAAQG,GAIRF,EAD2B,kBAAXE,EACTA,EAEA,wBAGX,MAAOG,GACPL,EAAOK,QAIAtB,EAAsB,CACjCuB,YAAa,GACbC,aAAc,GACdC,aAAc,GACdC,eAAe,EACfC,sBAAuB,GACvBC,oBAAqB,GACrBC,WAAY,WACZC,aAAc,mBACdC,WAAY,EACZC,OAAQ,GACRC,WAAY,EACZC,WAAY,EACZC,SAAU,GACVC,SAAU,GACVC,UAAW,GACXC,WAAY,GACZC,SAAU,GACVC,SAAU,EACVC,SAAU,EACVC,cAAe,EACfC,YAAa,EACbC,aAAc,KACdC,MAAO,GACPC,WAAY,GACZC,SAAU,GACVC,QAAS,GACTC,UAAW,GACXC,SAAU,GACV3C,SAAU,KACV4C,gBAAiB,GACjBC,QAAS,GACTC,eAAgB,GAChBC,aAAc,IAGHrD,EAAsB,CACjCsD,cAAc,EACdC,UAAW,GACXC,UAAW,GACXC,gBAAgB,EAChB7B,WAAY,GACZC,aAAc,GACdC,WAAY,EACZC,OAAQ,GACR2B,OAAQ,QACRtB,UAAW,GACXC,WAAY,GACZC,SAAU,GACVC,SAAU,EACVC,SAAU,EACVmB,MAAM,EACNlB,cAAe,EACfC,YAAa,EACbC,aAAc,KACdM,SAAU,GACV3C,SAAU,KACV4C,gBAAiB,KACjBC,QAAS,KACTE,aAAc,KACdO,WAAW,EACXC,eAAgB,IAGLtD,EAAa,kBAAML,OAAOC,QAAQC,aAAa0D,oB,sIC9E/CrD,EAAW,uCAAG,4BAAAhB,EAAA,4FAMvBC,IAAMC,SAASoE,2BANQ,SAOFlE,YACnB,wBACA,CACEmE,QAASzD,eAIX,SAdqB,OAOjB0D,EAPiB,OAgBvBvE,IAAMC,SAASuE,0BAAgBD,IAhBR,kDAkBvBvE,IAAMC,SAASwE,0BAAgB,EAAD,KAlBP,0DAAH","file":"static/js/22.87ea90bd.chunk.js","sourcesContent":["import { store } from 'app/store';\nimport {\n  promisifiedLiferayService,\n  updateUserDummyData,\n  createUserDummyData,\n  getGroupId,\n} from 'app/utils/liferayUtils';\nimport {\n  saveUserBegin,\n  saveUserSuccess,\n  saveUserFailure,\n  User,\n} from '../userSlice';\nimport { getUsersApi } from './getUsersApi';\n\nexport const saveUserApi = async (user: User) => {\n  if (process.env.NODE_ENV === 'development') {\n    store.dispatch(saveUserSuccess());\n    return;\n  }\n  try {\n    store.dispatch(saveUserBegin());\n    await promisifiedLiferayService(\n      user.userId ? '/user/update-user' : '/user/add-user',\n      {\n        ...(user.userId ? updateUserDummyData : createUserDummyData), // is this the appropriate place to complain that the liferay api is ridiculous?\n        companyId: window.Liferay.ThemeDisplay.getCompanyId(),\n        groupIds: [getGroupId()],\n        ...user,\n      },\n      'object'\n    );\n    store.dispatch(saveUserSuccess());\n    getUsersApi();\n  } catch (error) {\n    store.dispatch(saveUserFailure(error));\n  }\n};\n","declare global {\n  interface Window {\n    Liferay: any;\n  }\n}\n\n// This abstracts out most of the error handling and makes invoking api calls\n// inside of redux actions very tight, composable with Promise.all and\n// amenable to modern async-await syntax inside of thunk actions\nexport const promisifiedLiferayService = (\n  api: string,\n  data: {},\n  expectedResultType: any\n) =>\n  new Promise((resolve, reject) => {\n    try {\n      window.Liferay.Service(api, data, (result: any) => {\n        if (typeof result === expectedResultType) {\n          resolve(result);\n        } else if (expectedResultType === 'array' && Array.isArray(result)) {\n          resolve(result);\n        } else if (typeof result === 'string') {\n          reject(result);\n        } else {\n          reject('Unexpected error.');\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n\nexport const updateUserDummyData = {\n  oldPassword: '',\n  newPassword1: '',\n  newPassword2: '',\n  passwordReset: false,\n  reminderQueryQuestion: '',\n  reminderQueryAnswer: '',\n  screenName: 'not_null',\n  emailAddress: 'test@example.com',\n  facebookId: 0,\n  openId: '', // this is weird: only id field here that takes a string instead of an int\n  languageId: 0,\n  timeZoneId: 0,\n  greeting: '',\n  comments: '',\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  prefixId: 0,\n  suffixId: 0,\n  birthdayMonth: 1,\n  birthdayDay: 1,\n  birthdayYear: 1970,\n  smsSn: '',\n  facebookSn: '',\n  jabberSn: '',\n  skypeSn: '',\n  twitterSn: '',\n  jobTitle: '',\n  groupIds: null,\n  organizationIds: [],\n  roleIds: [],\n  userGroupRoles: [],\n  userGroupIds: [],\n};\n\nexport const createUserDummyData = {\n  autoPassword: false,\n  password1: '', //\n  password2: '', //\n  autoScreenName: false,\n  screenName: '', //\n  emailAddress: '', //\n  facebookId: 0,\n  openId: '',\n  locale: 'en_US',\n  firstName: '', //\n  middleName: '', //\n  lastName: '', //\n  prefixId: 0,\n  suffixId: 0,\n  male: true,\n  birthdayMonth: 1,\n  birthdayDay: 1,\n  birthdayYear: 1970,\n  jobTitle: '',\n  groupIds: null,\n  organizationIds: null,\n  roleIds: null,\n  userGroupIds: null,\n  sendEmail: false,\n  serviceContext: {},\n};\n\nexport const getGroupId = () => window.Liferay.ThemeDisplay.getScopeGroupId();\n","import { store } from 'app/store';\nimport { promisifiedLiferayService, getGroupId } from 'app/utils/liferayUtils';\nimport {\n  getUsersBegin,\n  getUsersSuccess,\n  getUsersFailure,\n  User,\n} from '../userSlice';\n\nconst dummyUserData: User[] = [\n  {\n    userId: '1',\n    firstName: 'Ben',\n    middleName: '',\n    lastName: 'Kinsey',\n  },\n];\n\nexport const getUsersApi = async () => {\n  if (process.env.NODE_ENV === 'development') {\n    store.dispatch(getUsersSuccess(dummyUserData));\n    return;\n  }\n  try {\n    store.dispatch(getUsersBegin());\n    const users = (await promisifiedLiferayService(\n      '/user/get-group-users',\n      {\n        groupId: getGroupId(),\n        // start: 1,\n        // end: 2\n      },\n      'array'\n    )) as User[];\n    store.dispatch(getUsersSuccess(users));\n  } catch (error) {\n    store.dispatch(getUsersFailure(error));\n  }\n};\n"],"sourceRoot":""}