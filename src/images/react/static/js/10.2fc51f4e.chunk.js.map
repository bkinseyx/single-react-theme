{"version":3,"sources":["features/userCard/components/UserEditCard/cancelOnClick.ts","features/userCard/selectors/getUserEditFormSelector.ts","features/userCard/components/UserEditCard/formOnChange.ts","features/userCard/components/UserEditCard/formOnSubmit.ts","features/userCard/components/UserEditCard/resetOnClick.ts","app/components/ObjectFieldTemplate/ObjectFieldTemplate.tsx","app/utils/formUtils.ts","app/components/PhoneNumberWidget/PhoneNumberWidget.tsx","app/components/CustomForm/CustomForm.tsx","features/userCard/components/UserEditCard/UserEditCard.tsx","app/components/ObjectFieldTemplate/ObjectFieldTemplate.module.css","app/components/CardFooterWrapper/CardFooterWrapper.tsx","app/components/CardFooterWrapper/CardFooterWrapper.module.css"],"names":["cancelOnClick","store","dispatch","cancelEditForm","getUserEditFormSelector","state","user","editForm","formOnChange","formData","setFormData","formOnSubmit","console","log","submitEditForm","resetOnClick","resetEditForm","ObjectFieldTemplate","TitleField","properties","description","title","required","idSchema","className","styles","row","map","prop","key","content","getFieldTitleFromError","error","schema","propertyFromError","property","substr","getTransformErrors","formats","errors","errorStrings","getErrorStrings","Object","keys","includes","params","format","message","stack","split","slice","word","join","phoneNumberFormat","regex","emailAddressFormat","reduce","customFormats","widgets","phoneNumberWidget","value","onChange","mask","maskChar","type","event","target","CustomForm","React","forwardRef","ref","formKey","data","uiSchema","transformErrors","onSubmit","onError","e","children","Fragment","showErrorList","UserEditCard","useSelector","formRef","useRef","role","aria-label","CardFooterWrapper","onClick","current","submit","module","exports","wrapper"],"mappings":"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","file":"static/js/10.2fc51f4e.chunk.js","sourcesContent":["import { store } from 'app/store';\nimport { cancelEditForm } from '../../userSlice';\n\nexport const cancelOnClick = (): void => {\n  store.dispatch(cancelEditForm());\n};\n","import { RootState } from 'app/rootReducer';\nimport { UserEditForm } from '../userSlice';\n\nexport const getUserEditFormSelector = (state: RootState): UserEditForm =>\n  state.user.editForm;\n","import { store } from 'app/store';\nimport { setFormData } from '../../userSlice';\n\nexport const formOnChange = ({ formData }: { formData: any }) => {\n  store.dispatch(setFormData(formData));\n};\n","import { store } from 'app/store';\nimport { submitEditForm } from '../../userSlice';\n\nexport const formOnSubmit = ({ formData }: { formData: any }) => {\n  console.log('submitted successfully');\n  store.dispatch(submitEditForm(formData));\n};\n","import { store } from 'app/store';\nimport { resetEditForm } from '../../userSlice';\n\nexport const resetOnClick = () => {\n  store.dispatch(resetEditForm());\n};\n","import React from 'react';\nimport { ObjectFieldTemplateProps } from 'react-jsonschema-form';\nimport styles from './ObjectFieldTemplate.module.css';\n\nexport const ObjectFieldTemplate = ({\n  TitleField,\n  properties,\n  title,\n  description,\n  required,\n  idSchema,\n}: ObjectFieldTemplateProps) => {\n  return (\n    <fieldset>\n      <div>\n        <div className={`row ${styles.row}`}>\n          {properties.map((prop) => (\n            <div key={prop.content.key as string | number | undefined}>\n              {prop.content}\n            </div>\n          ))}\n        </div>\n        {description}\n      </div>\n    </fieldset>\n  );\n};\n","import { StatelessComponent } from 'react';\nimport { AjvError, WidgetProps } from 'react-jsonschema-form';\nimport { JSONSchema6 } from 'json-schema';\n\nimport PhoneNumberWidget from 'app/components/PhoneNumberWidget/PhoneNumberWidget';\n\n/** field title is the plain english name (with space chars). */\nconst getFieldTitleFromError = (error: AjvError, schema: JSONSchema6) => {\n  // for some reason error properties are prepended with a . so we strip 'em off\n  const propertyFromError = error.property.substr(1);\n\n  // \"as any\" necessary here because JSONSchema6 properties can be undefined for\n  // some reason that eludes me.\n  // In our case we are fine here since we know all our properties must be strings.\n  console.log((schema.properties as any)[propertyFromError].title);\n  return (schema.properties as any)[propertyFromError].title;\n};\n\n/** given errors, generate user friendly error messages in a way that react-jsonschema-form expects */\nconst getTransformErrors = (schema: JSONSchema6, formats: Formats) => (\n  errors: AjvError[]\n) => {\n  const errorStrings = getErrorStrings(formats);\n  console.log({ errorStrings, errors });\n  return errors.map((error) =>\n    Object.keys(errorStrings).includes(error.params.format)\n      ? {\n          ...error,\n          message: errorStrings[error.params.format],\n          stack: `${getFieldTitleFromError(error, schema)} ${\n            errorStrings[error.params.format]\n          }`,\n        }\n      : {\n          ...error,\n          message: error.message\n            ?.split(' ')\n            .slice(1)\n            .map((word) => (word === 'property' ? 'field' : word))\n            .join(' '),\n          stack: `${getFieldTitleFromError(error, schema)} ${error.stack\n            ?.split(' ')\n            .slice(1)\n            .map((word) => (word === 'property' ? 'field' : word))\n            .join(' ')}`,\n        }\n  );\n};\n\ninterface Formats {\n  [key: string]: {\n    regex: RegExp;\n    error: string;\n  };\n}\n\n/**\n * I think it would be best to define formats directly with the error message.\n * This isn't built into react-jsonschema-format, so I will do it myself.\n */\nconst formats: Formats = {\n  phoneNumberFormat: {\n    regex: /^$|^\\(?([2-9][0-8][0-9])\\)?[-. ]?([2-9][0-9]{2})[-. ]?([0-9]{4})$/,\n    error: 'must be valid and in the format of XXX-XXX-XXXX',\n  },\n  emailAddressFormat: {\n    regex: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    error: 'must be in the format of something@domain.tld',\n  },\n};\n\n/** react-jsonschema-form expects formats like [key]: regex */\nconst getCustomFormats = (formats: Formats) =>\n  Object.keys(formats).reduce(\n    (customFormats, key) => ({\n      ...customFormats,\n      [key]: formats[key].regex,\n    }),\n    {}\n  );\n\ninterface ErrorStrings {\n  [key: string]: string;\n}\n\ntype GetErrorStrings = (formats: Formats) => ErrorStrings;\n\n/** transforms errors from format like [key]: regex */\nconst getErrorStrings: GetErrorStrings = (formats) =>\n  Object.keys(formats).reduce(\n    (customFormats, key) => ({\n      ...customFormats,\n      [key]: formats[key].error,\n    }),\n    {}\n  );\n\n/** extended components used by react-jsonschema-forms */\nconst widgets = {\n  phoneNumberWidget: PhoneNumberWidget as StatelessComponent<WidgetProps>,\n};\n\nexport { getTransformErrors, formats, widgets, getCustomFormats };\n","import React from 'react';\nimport InputMask from 'react-input-mask';\n\ninterface PhoneNumberWidgetProps {\n  value: string;\n  required: boolean | undefined;\n  onChange: (value: string) => void;\n}\n\n/**\n * This widget is an custom field component that can be used inside of react-jsonschema-forms\n * The props are fed in from react-jsonschema-forms.\n * It is necessary to make sure value is initialized as a string, rather than undefined.\n * Because otherwise react will give a warning about an uncontrolled component changing\n * to a controlled component. I also like input masking.\n */\nconst PhoneNumberWidget: React.FC<PhoneNumberWidgetProps> = ({\n  value = '',\n  required,\n  onChange,\n}) => (\n  <InputMask\n    mask=\"999-999-9999\"\n    maskChar=\"_\"\n    type=\"tel\"\n    className=\"form-control\"\n    value={value}\n    required={required}\n    onChange={(event): void => onChange(event.target.value)}\n  />\n);\n\nexport default PhoneNumberWidget;\n","import React, { Ref } from 'react';\nimport Form, { UiSchema } from 'react-jsonschema-form';\nimport { JSONSchema6 } from 'json-schema';\n\nimport { ObjectFieldTemplate } from 'app/components/ObjectFieldTemplate/ObjectFieldTemplate';\nimport {\n  widgets,\n  getCustomFormats,\n  getTransformErrors,\n  formats,\n} from 'app/utils/formUtils';\n\nexport interface CustomFormImperative {\n  submit: () => void;\n}\n\ninterface CustomFormProps {\n  formKey: number;\n  data: {};\n  schema: JSONSchema6;\n  uiSchema: UiSchema;\n  formOnChange: ({ formData }: { formData: any }) => void;\n  formOnSubmit: ({ formData }: { formData: any }) => void;\n}\n\nexport const CustomForm = React.forwardRef(\n  (\n    {\n      formKey,\n      data,\n      schema,\n      uiSchema,\n      formOnChange,\n      formOnSubmit,\n    }: CustomFormProps,\n    ref: Ref<CustomFormImperative>\n  ) => {\n    return (\n      <Form\n        // key only seems to be necessary in order to clear the form\n        // see https://github.com/rjsf-team/react-jsonschema-form/issues/953#issuecomment-397815654\n        key={formKey}\n        schema={schema}\n        uiSchema={uiSchema}\n        widgets={widgets}\n        customFormats={getCustomFormats(formats)}\n        transformErrors={getTransformErrors(schema, formats)}\n        formData={data}\n        onChange={formOnChange}\n        onSubmit={formOnSubmit}\n        onError={(e) => console.log(e)}\n        children={<React.Fragment />}\n        showErrorList={false}\n        ObjectFieldTemplate={ObjectFieldTemplate}\n        ref={ref as any}\n      />\n    );\n  }\n);\n\n// export const CustomForm = forwardRef((\n//   { key, data, schema, uiSchema }: CustomFormProps,\n//   ref: Ref<Form>\n// ) => {\n//   const formRef = useRef<Form<{}>>();\n\n//   useImperativeHandle(ref, () => ({\n//     submit: () => {\n//       formRef?.current?.submit();\n//     },\n//   })));\n\n//   return (\n//     <Form\n//       // key only seems to be necessary in order to clear the form\n//       // see https://github.com/rjsf-team/react-jsonschema-form/issues/953#issuecomment-397815654\n//       key={key}\n//       schema={schema}\n//       uiSchema={uiSchema}\n//       widgets={widgets}\n//       customFormats={getCustomFormats(formats)}\n//       transformErrors={getTransformErrors(schema, formats)}\n//       formData={data}\n//       onChange={formOnChange}\n//       onSubmit={formOnSubmit}\n//       onError={(e) => console.log(e)}\n//       children={<React.Fragment />}\n//       showErrorList={false}\n//       ObjectFieldTemplate={ObjectFieldTemplate}\n//       ref={formRef as any}\n//     />\n//   );\n// };\n","import React, { useRef } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { CardFooterWrapper } from 'app/components/CardFooterWrapper/CardFooterWrapper';\nimport { cancelOnClick } from './cancelOnClick';\nimport { getUserEditFormSelector } from 'features/userCard/selectors/getUserEditFormSelector';\nimport { formOnChange } from './formOnChange';\nimport { formOnSubmit } from './formOnSubmit';\nimport {\n  CustomForm,\n  CustomFormImperative,\n} from 'app/components/CustomForm/CustomForm';\nimport { resetOnClick } from './resetOnClick';\n\nexport const UserEditCard: React.FC = () => {\n  const { formKey, data = {}, schema, uiSchema } = useSelector(\n    getUserEditFormSelector\n  );\n  const formRef = useRef<CustomFormImperative>(null);\n\n  console.log('here');\n\n  return (\n    <div className=\"card\" role=\"main\" aria-label=\"User Card\">\n      <div className=\"card-header\">\n        <h5 className=\"card-title\">Users</h5>\n      </div>\n      <div className=\"card-body\">\n        <CustomForm\n          formKey={formKey}\n          data={data}\n          schema={schema}\n          uiSchema={uiSchema}\n          formOnChange={formOnChange}\n          formOnSubmit={formOnSubmit}\n          ref={formRef}\n        />\n      </div>\n      <div className=\"card-footer\">\n        <CardFooterWrapper>\n          <button\n            className=\"btn btn-primary\"\n            onClick={() => {\n              formRef.current?.submit();\n            }}\n          >\n            Save User\n          </button>\n          <button className=\"btn btn-secondary\" onClick={resetOnClick}>\n            Reset\n          </button>\n          <button className=\"btn btn-primary\" onClick={cancelOnClick}>\n            Cancel\n          </button>\n        </CardFooterWrapper>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"ObjectFieldTemplate_row__fITKL\"};","import React from 'react';\nimport styles from './CardFooterWrapper.module.css';\n\nexport const CardFooterWrapper: React.FC = ({ children }) => (\n  <div className={styles.wrapper}>{children}</div>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CardFooterWrapper_wrapper__1sA5G\"};"],"sourceRoot":""}