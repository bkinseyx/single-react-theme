{"version":3,"sources":["features/profileCard/components/ProfileItem/ProfileItem.test.tsx","../node_modules/classnames/index.js","app/components/CustomTextInput/CustomTextInput.tsx","features/profileCard/selectors/profileTypesSelector.ts","features/profileCard/selectors/isActiveSelector.ts","features/profileCard/components/ProfileItem/getNameOnChange.ts","features/profileCard/components/ProfileItem/getTypeOnChange.ts","features/profileCard/components/ProfileItem/getItemOnClick.ts","features/profileCard/components/ProfileItem/getDeleteOnClick.ts","features/profileCard/components/ProfileItem/ProfileItem.module.css","app/components/CustomSelect/CustomSelect.tsx","features/profileCard/components/ProfileItem/ProfileItem.tsx"],"names":["renderItem","profile","render","store","test","getState","profileList","asFragment","expect","toMatchSnapshot","rerender","textInput","screen","getByLabelText","toHaveValue","fireEvent","change","target","value","toMatchInlineSnapshot","typeSelect","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","default","CustomTextInput","onChange","label","idPrefix","autoFocus","inputId","htmlFor","id","type","className","event","profileTypesSelector","state","profileTypes","getIsActiveSelector","activeProfileId","profileId","getNameOnChange","name","dispatch","updateProfile","getTypeOnChange","profileType","getItemOnClick","setActiveProfile","getDeleteOnClick","deleteProfile","stopPropagation","CustomSelect","options","selectId","map","option","ProfileItem","emptyProfile","useSelector","isActive","styles","profileItem","active","onClick","buttonWrapper"],"mappings":"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","file":"static/js/6.03720097.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  render /*, screen, within*/,\n  screen,\n  fireEvent,\n  RenderResult,\n} from '@testing-library/react';\nimport { Provider } from 'react-redux';\n\nimport { store } from 'app/store';\nimport { ProfileItem } from './ProfileItem';\nimport { Profile } from 'features/profileCard/profileSlice';\n\nconst renderItem = (profile: Profile): RenderResult =>\n  render(\n    <Provider store={store}>\n      <ProfileItem profile={profile} />\n    </Provider>,\n  );\n\ntest('renders ProfileItem', () => {\n  const profile = store.getState().profile.profileList[0];\n  const { asFragment } = renderItem(profile);\n  expect(asFragment()).toMatchSnapshot();\n});\n\ntest('ProfileItem name field', () => {\n  let profile = store.getState().profile.profileList[0];\n  const { asFragment, rerender } = renderItem(profile);\n  let textInput = screen.getByLabelText('Name');\n  expect(textInput).toHaveValue('Ben');\n  fireEvent.change(textInput, { target: { value: 'George' } });\n\n  textInput = screen.getByLabelText('Name');\n  profile = store.getState().profile.profileList[0];\n  expect(profile).toMatchInlineSnapshot(`\n    Object {\n      \"name\": \"George\",\n      \"profileId\": 1,\n      \"profileType\": \"admin\",\n      \"showToDoList\": true,\n    }\n  `);\n  rerender(\n    <Provider store={store}>\n      <ProfileItem profile={profile} />\n    </Provider>,\n  );\n  expect(textInput).toHaveValue('George');\n  expect(asFragment()).toMatchSnapshot();\n});\n\ntest('ProfileItem type field', () => {\n  let profile = store.getState().profile.profileList[0];\n  const { asFragment, rerender } = renderItem(profile);\n  let typeSelect = screen.getByLabelText('Type');\n  expect(typeSelect).toHaveValue('admin');\n  fireEvent.change(typeSelect, { target: { value: 'user' } });\n\n  typeSelect = screen.getByLabelText('Type');\n  profile = store.getState().profile.profileList[0];\n  expect(profile).toMatchInlineSnapshot(`\n    Object {\n      \"name\": \"George\",\n      \"profileId\": 1,\n      \"profileType\": \"user\",\n      \"showToDoList\": true,\n    }\n  `);\n  rerender(\n    <Provider store={store}>\n      <ProfileItem profile={profile} />\n    </Provider>,\n  );\n  expect(typeSelect).toHaveValue('user');\n  expect(asFragment()).toMatchSnapshot();\n});\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from 'react';\n\ninterface CustomTextInputProps {\n  onChange: (value: string) => void;\n  value?: string;\n  label: string;\n  idPrefix: string;\n  autoFocus?: boolean;\n}\n\nexport const CustomTextInput: React.FC<CustomTextInputProps> = ({\n  value,\n  onChange,\n  label,\n  idPrefix,\n  autoFocus,\n}) => {\n  const inputId = `${idPrefix}-input`;\n\n  return (\n    <div>\n      <label htmlFor={inputId}>{label}</label>\n      <input\n        id={inputId}\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(event): void => onChange(event.target.value)}\n        autoFocus={autoFocus}\n      />\n    </div>\n  );\n};\n","import { RootState } from 'app/rootReducer';\n\nexport const profileTypesSelector = (state: RootState): string[] =>\n  state.profile.profileTypes as string[];\n","import { RootState } from 'app/rootReducer';\nimport { Profile } from '../profileSlice';\nimport { WithRequired } from 'app/typeUtils';\nimport { ProfileTemplateFields } from '../helpers/profileTemplate';\n\nexport const getIsActiveSelector = (\n  profile: WithRequired<Profile, ProfileTemplateFields>\n) => (state: RootState): boolean =>\n  state.profile.activeProfileId === profile.profileId;\n","import { store } from 'app/store';\nimport { updateProfile } from '../../profileSlice';\n\nexport const getNameOnChange = (profileId?: number) => (name: string): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(\n    updateProfile({\n      profileId,\n      name,\n    }),\n  );\n};\n","import { store } from 'app/store';\nimport { updateProfile, ProfileType } from '../../profileSlice';\n\nexport const getTypeOnChange = (profileId?: number) => (\n  value: string,\n): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(\n    updateProfile({\n      profileId,\n      profileType: value as ProfileType,\n    }),\n  );\n};\n","import { store } from 'app/store';\nimport { setActiveProfile } from '../../profileSlice';\n\nexport const getItemOnClick = (profileId?: number) => (): void => {\n  store.dispatch(setActiveProfile(profileId));\n};\n","import React from 'react';\nimport { store } from 'app/store';\nimport { deleteProfile } from '../../profileSlice';\n\nexport const getDeleteOnClick = (profileId?: number) => (\n  event: React.MouseEvent,\n): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(deleteProfile(profileId));\n  event.stopPropagation();\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileItem\":\"ProfileItem_profileItem___Vthf\",\"buttonWrapper\":\"ProfileItem_buttonWrapper__Un2Su\"};","import React from 'react';\n\ninterface CustomSelectProps {\n  onChange: (value: string) => void;\n  options: string[];\n  value: string;\n  label: string;\n  idPrefix: string;\n}\n\nexport const CustomSelect: React.FC<CustomSelectProps> = ({\n  options,\n  value,\n  onChange,\n  label,\n  idPrefix,\n}) => {\n  const selectId = `${idPrefix}-select`;\n  return (\n    <div>\n      <label htmlFor={selectId}>{label}</label>\n      <select\n        id={selectId}\n        value={value}\n        className=\"form-control\"\n        onChange={(event): void => onChange(event?.target.value)}\n      >\n        {options.map((option) => (\n          <option key={option}>{option}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styles from './ProfileItem.module.css';\nimport classNames from 'classnames';\n\nimport { Profile } from '../../profileSlice';\nimport { CustomSelect } from 'app/components/CustomSelect/CustomSelect';\nimport { CustomTextInput } from 'app/components/CustomTextInput/CustomTextInput';\nimport { emptyProfile } from '../../helpers/profileTemplate';\nimport { profileTypesSelector } from '../../selectors/profileTypesSelector';\nimport { getIsActiveSelector } from '../../selectors/isActiveSelector';\nimport { getNameOnChange } from './getNameOnChange';\nimport { getTypeOnChange } from './getTypeOnChange';\nimport { getItemOnClick } from './getItemOnClick';\nimport { getDeleteOnClick } from './getDeleteOnClick';\n\ninterface ProfileProps {\n  profile: Profile;\n}\n\nexport const ProfileItem: React.FC<ProfileProps> = ({\n  profile = emptyProfile,\n}) => {\n  const profileTypes = useSelector(profileTypesSelector);\n  const isActive = useSelector(getIsActiveSelector(profile));\n\n  return (\n    <li\n      className={classNames('list-group-item', styles.profileItem, {\n        active: isActive,\n      })}\n      onClick={getItemOnClick(profile.profileId)}\n    >\n      <CustomTextInput\n        idPrefix={`name-${profile.profileId}`}\n        label={'Name'}\n        value={profile.name}\n        onChange={getNameOnChange(profile.profileId)}\n        autoFocus={isActive}\n      />\n      <CustomSelect\n        idPrefix={`type-${profile.profileId}`}\n        label={'Type'}\n        value={profile.profileType}\n        options={profileTypes}\n        onChange={getTypeOnChange(profile.profileId)}\n      />\n      <div className={styles.buttonWrapper}>\n        <button\n          className=\"btn btn-danger\"\n          onClick={getDeleteOnClick(profile.profileId)}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n"],"sourceRoot":""}