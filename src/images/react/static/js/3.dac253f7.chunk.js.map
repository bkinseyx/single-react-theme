{"version":3,"sources":["features/toDoCard/components/ToDoCard/ToDoCard.tsx","features/toDoCard/components/ToDoCard/ToDoCard.test.tsx","app/components/CustomTextInput/CustomTextInput.tsx","features/toDoCard/components/ToDoItem/getDescriptionOnChange.ts","features/toDoCard/components/ToDoItem/getDeleteOnClick.ts","features/toDoCard/components/ToDoItem/getIsCompleteOnChange.ts","features/toDoCard/selectors/activeProfileSelector.ts","app/components/CardFooterWrapper/CardFooterWrapper.tsx","app/components/CardFooterWrapper/CardFooterWrapper.module.css","features/toDoCard/components/ToDoItem/ToDoItem.module.css","features/toDoCard/components/ToDoCard/getCreateOnClick.ts","features/toDoCard/components/ToDoCard/getErrorCloseOnClick.ts","features/toDoCard/selectors/errorMessageSelector.ts","app/components/CustomCheckbox/CustomCheckbox.tsx","features/toDoCard/components/ToDoItem/ToDoItem.tsx","app/components/CustomCheckbox/CustomCheckbox.module.css","features/toDoCard/selectors/toDoListSelector.ts","features/toDoCard/components/ToDoCard/ToDoCardFooter.tsx"],"names":["ToDoCard","reactConfig","toDoList","useSelector","toDoListSelector","activeProfile","activeProfileSelector","className","role","aria-label","title","name","map","toDo","key","toDoId","renderCard","render","store","test","asFragment","expect","toMatchSnapshot","screen","getByLabelText","toBeInTheDocument","getByRole","toDoListItems","within","queryAllByRole","toHaveLength","dispatch","setActiveProfile","rerender","getAllByRole","deleteButton","getByText","fireEvent","click","reset","createButton","lastItem","not","toBeChecked","toHaveValue","CustomTextInput","value","onChange","label","idPrefix","autoFocus","inputId","htmlFor","id","type","event","target","getDescriptionOnChange","description","updateToDo","getDeleteOnClick","deleteToDo","getIsCompleteOnChange","isComplete","state","profile","profileList","find","profileId","activeProfileId","CardFooterWrapper","children","styles","wrapper","module","exports","getCreateOnClick","createToDo","setErrorMessage","getErrorCloseOnClick","errorMessageSelector","errorMessage","CustomCheckbox","checked","checkbox","ToDoItem","emptyToDo","toDoItem","buttonWrapper","onClick","filter","ToDoCardFooter","classNames","disabled","variant","dismissible","onClose"],"mappings":"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","file":"static/js/3.dac253f7.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { ToDoItem } from '../ToDoItem/ToDoItem';\nimport { toDoListSelector } from '../../selectors/toDoListSelector';\nimport { activeProfileSelector } from '../../selectors/activeProfileSelector';\nimport { ToDoCardFooter } from './ToDoCardFooter';\nimport { TopLevelComponent } from 'app/typeUtils';\n\ninterface ToDoCardProps {\n  reactConfig?: {\n    title?: string;\n  };\n}\n\nexport const ToDoCard: TopLevelComponent<ToDoCardProps> = ({ reactConfig }) => {\n  const toDoList = useSelector(toDoListSelector);\n  const activeProfile = useSelector(activeProfileSelector);\n  return (\n    <div className=\"card\" role=\"complementary\" aria-label=\"ToDo Card\">\n      <div className=\"card-header\">\n        <h5 className=\"card-title\">\n          {reactConfig?.title}{' '}\n          {activeProfile?.name && `for ${activeProfile?.name}`}\n        </h5>\n      </div>\n      <div className=\"card-body\">\n        <ul className=\"list-group\">\n          {toDoList.map((toDo) => (\n            <ToDoItem key={toDo.toDoId} toDo={toDo}></ToDoItem>\n          ))}\n        </ul>\n      </div>\n      <ToDoCardFooter></ToDoCardFooter>\n    </div>\n  );\n};\nexport default ToDoCard;\n","import React from 'react';\nimport {\n  render,\n  screen,\n  within,\n  RenderResult,\n  fireEvent,\n} from '@testing-library/react';\nimport { Provider } from 'react-redux';\n\nimport { store } from 'app/store';\nimport { ToDoCard } from './ToDoCard';\nimport { reset } from '../../toDoSlice';\nimport { setActiveProfile } from 'features/profileCard/profileSlice';\n\nconst renderCard = (): RenderResult =>\n  render(\n    <Provider store={store}>\n      <ToDoCard />\n    </Provider>,\n  );\n\ntest('renders the ToDoCard', () => {\n  const { asFragment } = renderCard();\n  expect(asFragment()).toMatchSnapshot();\n  expect(screen.getByLabelText(/toDo card/i)).toBeInTheDocument();\n  const toDoList = screen.getByRole('list');\n  expect(toDoList).toBeInTheDocument();\n\n  // we have to use queryAll* instead of getAllBy* in order to test non-existence.\n  // see https://stackoverflow.com/questions/52783144/how-do-you-test-for-the-non-existence-of-an-element-using-jest-and-react-testing\n  const toDoListItems = within(toDoList).queryAllByRole('listitem');\n  expect(toDoListItems).toHaveLength(0);\n});\n\ntest('test delete button', () => {\n  store.dispatch(setActiveProfile(1));\n  const { rerender, asFragment } = renderCard();\n  const toDoList = screen.getByRole('list');\n  let toDoListItems = within(toDoList).getAllByRole('listitem');\n  const deleteButton = within(toDoListItems[0]).getByText(/delete/i);\n  fireEvent.click(deleteButton);\n  rerender(\n    <Provider store={store}>\n      <ToDoCard />\n    </Provider>,\n  );\n  toDoListItems = within(toDoList).getAllByRole('listitem');\n  expect(toDoListItems).toHaveLength(2);\n  expect(asFragment()).toMatchSnapshot();\n});\n\ntest('test create button', () => {\n  store.dispatch(reset());\n  store.dispatch(setActiveProfile(1));\n  const { rerender, asFragment } = renderCard();\n  const createButton = screen.getByText(/create/i);\n  const toDoList = screen.getByRole('list');\n  let toDoListItems = within(toDoList).getAllByRole('listitem');\n  expect(toDoListItems).toHaveLength(3);\n  fireEvent.click(createButton);\n  rerender(\n    <Provider store={store}>\n      <ToDoCard />\n    </Provider>,\n  );\n  toDoListItems = within(toDoList).getAllByRole('listitem');\n  expect(toDoListItems).toHaveLength(4);\n  expect(asFragment()).toMatchSnapshot();\n  const lastItem = toDoListItems[3];\n  expect(within(lastItem).getByLabelText(/complete/i)).not.toBeChecked();\n  expect(within(lastItem).getByLabelText(/description/i)).toHaveValue('');\n});\n","import React from 'react';\n\ninterface CustomTextInputProps {\n  onChange: (value: string) => void;\n  value?: string;\n  label: string;\n  idPrefix: string;\n  autoFocus?: boolean;\n}\n\nexport const CustomTextInput: React.FC<CustomTextInputProps> = ({\n  value,\n  onChange,\n  label,\n  idPrefix,\n  autoFocus,\n}) => {\n  const inputId = `${idPrefix}-input`;\n\n  return (\n    <div>\n      <label htmlFor={inputId}>{label}</label>\n      <input\n        id={inputId}\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(event): void => onChange(event.target.value)}\n        autoFocus={autoFocus}\n      />\n    </div>\n  );\n};\n","import { updateToDo } from '../../toDoSlice';\nimport { store } from 'app/store';\n\nexport const getDescriptionOnChange = (toDoId?: number) => (\n  description: string,\n): void => {\n  /* istanbul ignore next */\n  if (!toDoId) {\n    return;\n  }\n  store.dispatch(\n    updateToDo({\n      toDoId,\n      description,\n    }),\n  );\n};\n","import { deleteToDo } from '../../toDoSlice';\nimport { store } from 'app/store';\n\nexport const getDeleteOnClick = (toDoId?: number) => (): void => {\n  /* istanbul ignore next */\n  if (!toDoId) {\n    return;\n  }\n  store.dispatch(deleteToDo(toDoId));\n};\n","import { updateToDo } from '../../toDoSlice';\nimport { store } from 'app/store';\n\nexport const getIsCompleteOnChange = (toDoId?: number) => (\n  isComplete: boolean,\n): void => {\n  /* istanbul ignore next */\n  if (!toDoId) {\n    return;\n  }\n  store.dispatch(\n    updateToDo({\n      toDoId,\n      isComplete,\n    }),\n  );\n};\n","import { RootState } from 'app/rootReducer';\nimport { Profile } from 'features/profileCard/profileSlice';\n\nexport const activeProfileSelector = (state: RootState): Profile | undefined =>\n  state.profile.profileList.find(\n    (profile) => profile.profileId === state.profile.activeProfileId,\n  );\n","import React from 'react';\nimport styles from './CardFooterWrapper.module.css';\n\nexport const CardFooterWrapper: React.FC = ({ children }) => (\n  <div className={styles.wrapper}>{children}</div>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CardFooterWrapper_wrapper__1sA5G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toDoItem\":\"ToDoItem_toDoItem__1I-c8\",\"buttonWrapper\":\"ToDoItem_buttonWrapper__1GahE\"};","import { store } from 'app/store';\nimport { createToDo, setErrorMessage } from '../../toDoSlice';\n\nexport const getCreateOnClick = (profileId?: number) => (): void => {\n  if (!profileId) {\n    store.dispatch(setErrorMessage('Must select a profile first.'));\n    return;\n  }\n  store.dispatch(createToDo(profileId));\n};\n","import { store } from 'app/store';\nimport { setErrorMessage } from '../../toDoSlice';\n\nexport const getErrorCloseOnClick = () => (): void => {\n  store.dispatch(setErrorMessage());\n};\n","import { RootState } from 'app/rootReducer';\n\nexport const errorMessageSelector = (state: RootState): string | undefined =>\n  state.toDo.errorMessage;\n","import React from 'react';\n\nimport styles from './CustomCheckbox.module.css';\n\ninterface CustomCheckboxProps {\n  onChange: (value: boolean) => void;\n  checked?: boolean;\n  label: string;\n  idPrefix: string;\n  autoFocus?: boolean;\n}\n\nexport const CustomCheckbox: React.FC<CustomCheckboxProps> = ({\n  checked,\n  onChange,\n  label,\n  idPrefix,\n  autoFocus,\n}) => {\n  const inputId = `${idPrefix}-input`;\n\n  return (\n    <div>\n      <label htmlFor={inputId}>{label}</label>\n      <input\n        id={inputId}\n        type=\"checkbox\"\n        className={`form-control ${styles.checkbox}`}\n        checked={checked}\n        onChange={(event): void => onChange(event.target.checked)}\n        autoFocus={autoFocus}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport styles from './ToDoItem.module.css';\n\nimport { ToDo } from '../../toDoSlice';\nimport { CustomTextInput } from 'app/components/CustomTextInput/CustomTextInput';\nimport { emptyToDo } from '../../helpers/toDoTemplate';\nimport { getDescriptionOnChange } from './getDescriptionOnChange';\nimport { getDeleteOnClick } from './getDeleteOnClick';\nimport { getIsCompleteOnChange } from './getIsCompleteOnChange';\nimport { CustomCheckbox } from 'app/components/CustomCheckbox/CustomCheckbox';\n\ninterface ToDoProps {\n  toDo: ToDo;\n}\n\nexport const ToDoItem: React.FC<ToDoProps> = ({ toDo = emptyToDo }) => {\n  return (\n    <li className={'list-group-item ' + styles.toDoItem}>\n      <CustomCheckbox\n        idPrefix={`isComplete-${toDo.toDoId}`}\n        label={'Complete?'}\n        checked={toDo.isComplete}\n        onChange={getIsCompleteOnChange(toDo.toDoId)}\n      />\n      <CustomTextInput\n        idPrefix={`description-${toDo.toDoId}`}\n        label={'Description'}\n        value={toDo.description}\n        onChange={getDescriptionOnChange(toDo.toDoId)}\n      />\n      <div className={styles.buttonWrapper}>\n        <button\n          className=\"btn btn-danger\"\n          onClick={getDeleteOnClick(toDo.toDoId)}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"CustomCheckbox_checkbox__3dmq1\"};","import { RootState } from 'app/rootReducer';\nimport { ToDo } from '../toDoSlice';\n\nexport const toDoListSelector = (state: RootState): ToDo[] =>\n  state.toDo.toDoList.filter(\n    (toDo) => toDo.profileId === state.profile.activeProfileId,\n  );\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Alert } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { CardFooterWrapper } from 'app/components/CardFooterWrapper/CardFooterWrapper';\nimport { getCreateOnClick } from './getCreateOnClick';\nimport { getErrorCloseOnClick } from './getErrorCloseOnClick';\nimport { activeProfileSelector } from '../../selectors/activeProfileSelector';\nimport { errorMessageSelector } from 'features/toDoCard/selectors/errorMessageSelector';\n\nexport const ToDoCardFooter: React.FC = () => {\n  const activeProfile = useSelector(activeProfileSelector);\n  const errorMessage = useSelector(errorMessageSelector);\n  return (\n    <div className=\"card-footer\">\n      <CardFooterWrapper>\n        <button\n          className={classNames('btn', 'btn-primary', {\n            disabled: !activeProfile?.profileId,\n          })}\n          onClick={getCreateOnClick(activeProfile?.profileId)}\n        >\n          Create New ToDo\n        </button>\n        {errorMessage && (\n          <Alert variant=\"warning\" dismissible onClose={getErrorCloseOnClick()}>\n            {errorMessage}\n          </Alert>\n        )}\n      </CardFooterWrapper>\n    </div>\n  );\n};\n"],"sourceRoot":""}