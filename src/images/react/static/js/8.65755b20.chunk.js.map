{"version":3,"sources":["features/userCard/api/getUser.ts","features/userCard/components/UserItem/getDeleteOnClick.ts","features/userCard/components/UserItem/getEditOnClick.ts","features/userCard/components/UserItem/UserItem.module.css","features/userCard/api/getUsers.ts","features/userCard/components/UserItem/UserItem.tsx","features/userCard/selectors/usersSelector.ts","features/userCard/components/UserListCard/getCreateOnClick.ts","features/userCard/components/UserListCard/UserListCard.tsx","app/components/CardFooterWrapper/CardFooterWrapper.tsx","app/components/CardFooterWrapper/CardFooterWrapper.module.css","app/utils/liferayUtils.ts"],"names":["getUser","user","a","promisifiedLiferayService","userId","store","dispatch","getUserSuccess","getUserFailure","getDeleteOnClick","event","deleteUser","stopPropagation","getEditOnClick","module","exports","getUsers","getUsersBegin","groupId","getGroupId","users","getUsersSuccess","getUsersFailure","UserItem","emptyUser","className","styles","item","firstName","middleName","lastName","screenName","emailAddress","buttonsWrapper","onClick","usersSelector","state","getCreateOnClick","createUser","UserListCard","useEffect","console","log","userList","useSelector","role","aria-label","map","key","CardFooterWrapper","children","wrapper","api","data","expectedResultType","Promise","resolve","reject","window","Liferay","Service","result","Array","isArray","error","ThemeDisplay","getScopeGroupId"],"mappings":"wOASaA,EAAO,uCAAG,WAAOC,GAAP,SAAAC,EAAA,qGAMOC,YACxB,uBACA,CAAEC,OAAQH,EAAKG,QACf,UATiB,cAWnBC,IAAMC,SAASC,yBAAeN,IAXX,kDAanBI,IAAMC,SAASE,yBAAe,EAAD,KAbV,0DAAH,uD,iCCRpB,2EAGaC,EAAmB,SAACR,GAAD,OAAgB,SAC9CS,GAGKT,IAGLI,IAAMC,SAASK,qBAAWV,IAC1BS,EAAME,sB,iCCVR,mEAEaC,EAAiB,SAACZ,GAAD,OAAiB,SAC7CS,GAGKT,IAGLD,kBAAQC,GACRS,EAAME,sB,oBCXRE,EAAOC,QAAU,CAAC,KAAO,uBAAuB,eAAiB,mC,oICiBpDC,EAAQ,uCAAG,4BAAAd,EAAA,4FAMpBG,IAAMC,SAASW,2BANK,SAOCd,YACnB,wBACA,CACEe,QAASC,eAIX,SAdkB,OAOdC,EAPc,OAgBpBf,IAAMC,SAASe,0BAAgBD,IAhBX,kDAkBpBf,IAAMC,SAASgB,0BAAgB,EAAD,KAlBV,0DAAH,sD,iCClBrB,+GAYaC,EAAgC,SAAC,GAAD,YAAGtB,YAAH,MAAUuB,YAAV,SAC3C,wBAAIC,UAAS,0BAAqBC,IAAOC,OACvC,sCACS1B,EAAK2B,UADd,IAC0B3B,EAAK4B,WAD/B,IAC4C5B,EAAK6B,UAEjD,uDAAmB7B,EAAK8B,kBAAxB,QAAsC,UACtC,yDAAqB9B,EAAK+B,oBAA1B,QAA0C,UAC1C,yBAAKP,UAAS,oBAAeC,IAAOO,iBAClC,4BAAQR,UAAU,kBAAkBS,QAASrB,yBAAeZ,IAA5D,QAGA,4BAAQwB,UAAU,iBAAiBS,QAASzB,2BAAiBR,IAA7D,c,iCCpBN,qDAAO,IAAMkC,EAAgB,SAACC,GAAD,OAC3BA,EAAMnC,KAAKmB,Q,iCCJb,2EAGaiB,EAAmB,kBAAM,WACpChC,IAAMC,SAASgC,2B,iCCJjB,4HASaC,EAAyB,WACpCC,qBAAU,WACRC,QAAQC,IAAI,QACZ1B,uBACC,IAEH,IAAM2B,EAAWC,YAAYT,iBAE7B,OACE,yBAAKV,UAAU,OAAOoB,KAAK,OAAOC,aAAW,aAC3C,yBAAKrB,UAAU,eACb,wBAAIA,UAAU,cAAd,UAEF,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cACXkB,EAASI,KAAI,SAAC9C,GAAD,OACZ,kBAAC,WAAD,CAAU+C,IAAK/C,EAAKG,OAAQH,KAAMA,SAIxC,yBAAKwB,UAAU,eACb,kBAAC,IAAD,KACE,4BAAQA,UAAU,kBAAkBS,QAASG,8BAA7C,wB,gCC/BV,uEAGaY,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzC,yBAAKzB,UAAWC,IAAOyB,SAAUD,K,mBCHnCpC,EAAOC,QAAU,CAAC,QAAU,qC,gCCK5B,oEAGO,IAAMZ,EAA4B,SACvCiD,EACAC,EACAC,GAHuC,OAKvC,IAAIC,SAAQ,SAACC,EAASC,GACpB,IACEC,OAAOC,QAAQC,QAAQR,EAAKC,GAAM,SAACQ,UACtBA,IAAWP,GAEY,UAAvBA,GAAkCQ,MAAMC,QAAQF,GADzDL,EAAQK,GAIRJ,EAD2B,kBAAXI,EACTA,EAEA,wBAGX,MAAOG,GACPP,EAAOO,QAyCA7C,EAAa,kBAAMuC,OAAOC,QAAQM,aAAaC","file":"static/js/8.65755b20.chunk.js","sourcesContent":["import { store } from 'app/store';\nimport { promisifiedLiferayService, getGroupId } from 'app/utils/liferayUtils';\nimport {\n  getUserBegin,\n  getUserSuccess,\n  getUserFailure,\n  User,\n} from '../userSlice';\n\nexport const getUser = async (user: User) => {\n  if (process.env.NODE_ENV === 'development') {\n    store.dispatch(getUserSuccess(user));\n    return;\n  }\n  try {\n    const userDetails = await promisifiedLiferayService(\n      '/user/get-user-by-id',\n      { userId: user.userId },\n      'object'\n    );\n    store.dispatch(getUserSuccess(user));\n  } catch (error) {\n    store.dispatch(getUserFailure(error));\n  }\n};\n\n// promisifiedLiferayService(\n//   \"/role/get-roles\",\n//   { companyId: Liferay.ThemeDisplay.getCompanyId(), types: [1] },\n//   \"array\"\n// ),\n// promisifiedLiferayService(\n//   \"/role/get-user-roles\",\n//   { userId },\n//   \"array\"\n// )\n","import React from 'react';\nimport { store } from 'app/store';\nimport { deleteUser, User } from '../../userSlice';\n\nexport const getDeleteOnClick = (user: User) => (\n  event: React.MouseEvent\n): void => {\n  /* istanbul ignore next */\n  if (!user) {\n    return;\n  }\n  store.dispatch(deleteUser(user));\n  event.stopPropagation();\n};\n","import React from 'react';\nimport { User } from '../../userSlice';\nimport { getUser } from 'features/userCard/api/getUser';\n\nexport const getEditOnClick = (user?: User) => (\n  event: React.MouseEvent\n): void => {\n  /* istanbul ignore next */\n  if (!user) {\n    return;\n  }\n  getUser(user);\n  event.stopPropagation();\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"UserItem_item__2gGRR\",\"buttonsWrapper\":\"UserItem_buttonsWrapper__1e4zy\"};","import { store } from 'app/store';\nimport { promisifiedLiferayService, getGroupId } from 'app/utils/liferayUtils';\nimport {\n  getUsersBegin,\n  getUsersSuccess,\n  getUsersFailure,\n  User,\n} from '../userSlice';\n\nconst dummyUserData: User[] = [\n  {\n    userId: '1',\n    firstName: 'Ben',\n    middleName: '',\n    lastName: 'Kinsey',\n  },\n];\n\nexport const getUsers = async () => {\n  if (process.env.NODE_ENV === 'development') {\n    store.dispatch(getUsersSuccess(dummyUserData));\n    return;\n  }\n  try {\n    store.dispatch(getUsersBegin());\n    const users = (await promisifiedLiferayService(\n      '/user/get-group-users',\n      {\n        groupId: getGroupId(),\n        // start: 1,\n        // end: 2\n      },\n      'array'\n    )) as User[];\n    store.dispatch(getUsersSuccess(users));\n  } catch (error) {\n    store.dispatch(getUsersFailure(error));\n  }\n};\n","import React from 'react';\n\nimport { User } from 'features/userCard/userSlice';\nimport { emptyUser } from 'features/userCard/helpers/userTemplate';\nimport { getDeleteOnClick } from './getDeleteOnClick';\nimport { getEditOnClick } from './getEditOnClick';\nimport styles from './UserItem.module.css';\n\ninterface UserProps {\n  user: User;\n}\n\nexport const UserItem: React.FC<UserProps> = ({ user = emptyUser }) => (\n  <li className={`list-group-item ${styles.item}`}>\n    <div>\n      Name: {user.firstName} {user.middleName} {user.lastName}\n    </div>\n    <div>Screen name: {user.screenName ?? '<none>'}</div>\n    <div>Email Address: {user.emailAddress ?? '<none>'}</div>\n    <div className={`flex-grow ${styles.buttonsWrapper}`}>\n      <button className=\"btn btn-primary\" onClick={getEditOnClick(user)}>\n        Edit\n      </button>\n      <button className=\"btn btn-danger\" onClick={getDeleteOnClick(user)}>\n        Delete\n      </button>\n    </div>\n  </li>\n);\n","import { RootState } from 'app/rootReducer';\nimport { UserState } from '../userSlice';\n\nexport const usersSelector = (state: RootState): UserState['users'] =>\n  state.user.users;\n","import { store } from 'app/store';\nimport { createUser } from '../../userSlice';\n\nexport const getCreateOnClick = () => (): void => {\n  store.dispatch(createUser());\n};\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { UserItem } from '../UserItem/UserItem';\nimport { usersSelector } from '../../selectors/usersSelector';\nimport { CardFooterWrapper } from 'app/components/CardFooterWrapper/CardFooterWrapper';\nimport { getCreateOnClick } from './getCreateOnClick';\nimport { getUsers } from 'features/userCard/api/getUsers';\n\nexport const UserListCard: React.FC = () => {\n  useEffect(() => {\n    console.log('what');\n    getUsers();\n  }, []);\n\n  const userList = useSelector(usersSelector);\n\n  return (\n    <div className=\"card\" role=\"main\" aria-label=\"User Card\">\n      <div className=\"card-header\">\n        <h5 className=\"card-title\">Users</h5>\n      </div>\n      <div className=\"card-body\">\n        <ul className=\"list-group\">\n          {userList.map((user) => (\n            <UserItem key={user.userId} user={user}></UserItem>\n          ))}\n        </ul>\n      </div>\n      <div className=\"card-footer\">\n        <CardFooterWrapper>\n          <button className=\"btn btn-primary\" onClick={getCreateOnClick()}>\n            Create New User\n          </button>\n        </CardFooterWrapper>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport styles from './CardFooterWrapper.module.css';\n\nexport const CardFooterWrapper: React.FC = ({ children }) => (\n  <div className={styles.wrapper}>{children}</div>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CardFooterWrapper_wrapper__1sA5G\"};","declare global {\n  interface Window {\n    Liferay: any;\n  }\n}\n\n// This abstracts out most of the error handling and makes invoking api calls\n// inside of redux actions very tight, composable with Promise.all and\n// amenable to modern async-await syntax inside of thunk actions\nexport const promisifiedLiferayService = (\n  api: string,\n  data: {},\n  expectedResultType: any\n) =>\n  new Promise((resolve, reject) => {\n    try {\n      window.Liferay.Service(api, data, (result: any) => {\n        if (typeof result === expectedResultType) {\n          resolve(result);\n        } else if (expectedResultType === 'array' && Array.isArray(result)) {\n          resolve(result);\n        } else if (typeof result === 'string') {\n          reject(result);\n        } else {\n          reject('Unexpected error.');\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n\nexport const updateUserDummyData = {\n  oldPassword: '',\n  newPassword1: '',\n  newPassword2: '',\n  passwordReset: false,\n  reminderQueryQuestion: '',\n  reminderQueryAnswer: '',\n  screenName: 'not_null',\n  emailAddress: 'test@example.com',\n  facebookId: 0,\n  openId: '', // this is weird: only id field here that takes a string instead of an int\n  languageId: 0,\n  timeZoneId: 0,\n  greeting: '',\n  comments: '',\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  prefixId: 0,\n  suffixId: 0,\n  male: true,\n  birthdayMonth: 1,\n  birthdayDay: 1,\n  birthdayYear: 1970,\n  smsSn: '',\n  facebookSn: '',\n  jabberSn: '',\n  skypeSn: '',\n  twitterSn: '',\n  jobTitle: 'Tester',\n  groupIds: null,\n  organizationIds: [],\n  roleIds: [],\n  userGroupRoles: [],\n  userGroupIds: [],\n};\n\nexport const getGroupId = () => window.Liferay.ThemeDisplay.getScopeGroupId();\n"],"sourceRoot":""}