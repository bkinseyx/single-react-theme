{"version":3,"sources":["features/profileCard/profileSlice.ts","features/toDoCard/toDoSlice.ts","app/rootReducer.ts","app/store.ts","features/profileCard/helpers/profileTemplate.ts","features/toDoCard/helpers/toDoTemplate.ts","features/reduxDemo/reduxDemoSlice.ts","features/profileCard/reducers/createProfileReducer.ts","features/profileCard/reducers/deleteProfileReducer.ts","features/profileCard/reducers/updateProfileReducer.ts","features/profileCard/reducers/setActiveProfileReducer.ts","features/profileCard/reducers/resetReducer.ts","features/toDoCard/reducers/createToDoReducer.ts","features/toDoCard/reducers/deleteToDoReducer.ts","features/toDoCard/reducers/updateToDoReducer.ts","features/toDoCard/reducers/resetReducer.ts","features/toDoCard/reducers/setErrorMessageReducer.ts","index.tsx"],"names":["initialState","profileList","profileId","name","profileType","showToDoList","maxProfileId","profileTypes","profileSlice","createSlice","reducers","createProfile","createProfileReducer","deleteProfile","deleteProfileReducer","updateProfile","updateProfileReducer","setActiveProfile","setActiveProfileReducer","reset","resetReducer","actions","toDoList","toDoId","description","isComplete","maxToDoId","toDoSlice","createToDo","createToDoReducer","deleteToDo","deleteToDoReducer","updateToDo","updateToDoReducer","setErrorMessage","setErrorMessageReducer","rootReducer","combineReducers","reduxDemo","counterReducer","profile","profileReducer","toDo","toDoReducer","store","configureStore","reducer","emptyProfile","emptyToDo","counterSlice","value","increment","state","decrement","incrementByAmount","action","payload","incrementAsync","amount","dispatch","setTimeout","selectCount","push","activeProfileId","index","findIndex","splice","undefined","find","existingProfile","Object","assign","_state","_action","existingToDo","errorMessage","window","initThemeReact","a","App","default","document","querySelectorAll","forEach","el","innerHTML","reactApp","getAttribute","rawReactConfig","reactConfig","JSON","parse","ReactDOM","render","StrictMode","reactAutoInit"],"mappings":"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","file":"static/js/main.13d1750c.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nimport { createProfileReducer } from './reducers/createProfileReducer';\nimport { deleteProfileReducer } from './reducers/deleteProfileReducer';\nimport { updateProfileReducer } from './reducers/updateProfileReducer';\nimport { setActiveProfileReducer } from './reducers/setActiveProfileReducer';\n\nimport { resetReducer } from './reducers/resetReducer';\n\nconst profileTypes = ['guest', 'user', 'admin'] as const; // TS 3.4\nexport type ProfileType = typeof profileTypes[number]; // union type\n\nexport interface Profile {\n  profileId: number;\n  name?: string;\n  profileType: ProfileType;\n  showToDoList: boolean;\n}\n\nexport interface ProfileState {\n  profileList: Profile[];\n  maxProfileId: number;\n  profileTypes: ReadonlyArray<ProfileType>;\n  activeProfileId?: number;\n}\n\nexport const initialState: ProfileState = {\n  profileList: [\n    { profileId: 1, name: 'Ben', profileType: 'admin', showToDoList: true },\n    { profileId: 2, name: 'Sue', profileType: 'user', showToDoList: false },\n  ],\n  maxProfileId: 2,\n  profileTypes: profileTypes as ReadonlyArray<ProfileType>,\n};\n\nexport const profileSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    createProfile: createProfileReducer,\n    deleteProfile: deleteProfileReducer,\n    updateProfile: updateProfileReducer,\n    setActiveProfile: setActiveProfileReducer,\n    reset: resetReducer,\n  },\n});\n\nexport const {\n  createProfile,\n  deleteProfile,\n  updateProfile,\n  setActiveProfile,\n  reset,\n} = profileSlice.actions;\n\nexport default profileSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { createToDoReducer } from './reducers/createToDoReducer';\nimport { deleteToDoReducer } from './reducers/deleteToDoReducer';\nimport { updateToDoReducer } from './reducers/updateToDoReducer';\nimport { resetReducer } from './reducers/resetReducer';\nimport { setErrorMessageReducer } from './reducers/setErrorMessageReducer';\n\nexport interface ToDo {\n  toDoId: number;\n  description?: string;\n  profileId: number;\n  isComplete: boolean;\n}\n\nexport interface ToDoState {\n  toDoList: ToDo[];\n  maxToDoId: number;\n  errorMessage?: string;\n}\n\nexport const initialState: ToDoState = {\n  toDoList: [\n    { toDoId: 1, profileId: 1, description: 'eat tacos', isComplete: true },\n    { toDoId: 2, profileId: 1, description: 'drink milk', isComplete: false },\n    {\n      toDoId: 3,\n      profileId: 1,\n      description: 'walk and chew gum',\n      isComplete: false,\n    },\n  ],\n  maxToDoId: 3,\n};\n\nexport const toDoSlice = createSlice({\n  name: 'toDo',\n  initialState,\n  reducers: {\n    createToDo: createToDoReducer,\n    deleteToDo: deleteToDoReducer,\n    updateToDo: updateToDoReducer,\n    setErrorMessage: setErrorMessageReducer,\n    reset: resetReducer,\n  },\n});\n\nexport const {\n  createToDo,\n  deleteToDo,\n  updateToDo,\n  setErrorMessage,\n  reset,\n} = toDoSlice.actions;\n\nexport default toDoSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport counterReducer from '../features/reduxDemo/reduxDemoSlice';\r\nimport profileReducer from '../features/profileCard/profileSlice';\r\nimport toDoReducer from '../features/toDoCard/toDoSlice';\r\n\r\nexport const rootReducer = combineReducers({\r\n  reduxDemo: counterReducer,\r\n  profile: profileReducer,\r\n  toDo: toDoReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\n\r\nimport { rootReducer } from './rootReducer';\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n  module.hot.accept('./rootReducer', async () => {\r\n    const newRootReducer = (await import('./rootReducer')).default;\r\n    store.replaceReducer(newRootReducer);\r\n  });\r\n}\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import { Profile } from '../profileSlice';\nimport { WithRequired, WithOptional } from 'app/typeUtils';\n\nexport type ProfileTemplateFields = 'showToDoList' | 'profileType';\n\nexport type EmptyProfile = WithRequired<Profile, ProfileTemplateFields>;\n\nexport const emptyProfile: EmptyProfile = {\n  profileType: 'guest',\n  showToDoList: false,\n};\n\nexport type PartialProfile = WithOptional<\n  Omit<Profile, 'profileId'>,\n  ProfileTemplateFields\n>;\n","import { ToDo } from '../toDoSlice';\nimport { WithRequired, WithOptional } from 'app/typeUtils';\n\ntype ToDoTemplateFields = 'isComplete';\n\nexport type EmptyToDo = WithRequired<ToDo, ToDoTemplateFields>;\n\nexport const emptyToDo: EmptyToDo = {\n  isComplete: false,\n};\n\nexport type PartialToDo = WithOptional<\n  Omit<ToDo, 'toDoId'>,\n  ToDoTemplateFields\n>;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface ReduxDemoState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: ReduxDemoState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'reduxDemo',\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => (dispatch) => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.reduxDemo.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { ProfileState } from '../profileSlice';\nimport { emptyProfile } from '../helpers/profileTemplate';\n\nexport const createProfileReducer = (state: ProfileState): void => {\n  const profileId = ++state.maxProfileId;\n  state.profileList.push({\n    ...emptyProfile,\n    profileId,\n  });\n  state.activeProfileId = profileId;\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ProfileState } from '../profileSlice';\n\nexport const deleteProfileReducer = (\n  state: ProfileState,\n  action: PayloadAction<number>,\n): void => {\n  const index = state.profileList.findIndex(\n    (profile) => profile.profileId === action.payload,\n  );\n  state.profileList.splice(index, 1);\n  if (state.activeProfileId === action.payload) {\n    state.activeProfileId = undefined;\n  }\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ProfileState, Profile } from '../profileSlice';\nimport { WithRequired } from 'app/typeUtils';\n\nexport const updateProfileReducer = (\n  state: ProfileState,\n  action: PayloadAction<WithRequired<Profile, 'profileId'>>\n): void => {\n  const profile = state.profileList.find(\n    (existingProfile) => existingProfile.profileId === action.payload.profileId\n  );\n  /* istanbul ignore next */\n  if (!profile) {\n    return;\n  }\n  Object.assign(profile, action.payload);\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { ProfileState } from '../profileSlice';\n\nexport const setActiveProfileReducer = (\n  state: ProfileState,\n  action: PayloadAction<number | undefined>,\n): void => {\n  state.activeProfileId = action.payload;\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ProfileState, initialState } from '../profileSlice';\n\nexport const resetReducer = (\n  _state: ProfileState,\n  _action: PayloadAction,\n): ProfileState => initialState;\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { ToDoState } from '../toDoSlice';\nimport { emptyToDo } from '../helpers/toDoTemplate';\n\nexport const createToDoReducer = (\n  state: ToDoState,\n  action: PayloadAction<number>,\n): void => {\n  const toDoId = ++state.maxToDoId;\n  state.toDoList.push({\n    ...emptyToDo,\n    profileId: action.payload,\n    toDoId,\n  });\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ToDoState } from '../toDoSlice';\n\nexport const deleteToDoReducer = (\n  state: ToDoState,\n  action: PayloadAction<number>,\n): void => {\n  const index = state.toDoList.findIndex(\n    (toDo) => toDo.toDoId === action.payload,\n  );\n  state.toDoList.splice(index, 1);\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ToDoState, ToDo } from '../toDoSlice';\nimport { WithRequired } from 'app/typeUtils';\n\nexport const updateToDoReducer = (\n  state: ToDoState,\n  action: PayloadAction<WithRequired<ToDo, 'toDoId'>>\n): void => {\n  const toDo = state.toDoList.find(\n    (existingToDo) => existingToDo.toDoId === action.payload.toDoId\n  );\n  /* istanbul ignore next */\n  if (!toDo) {\n    return;\n  }\n  Object.assign(toDo, action.payload);\n};\n","import { PayloadAction } from '@reduxjs/toolkit';\n\nimport { ToDoState, initialState } from '../toDoSlice';\n\nexport const resetReducer = (\n  _state: ToDoState,\n  _action: PayloadAction,\n): ToDoState => initialState;\n","import { PayloadAction } from '@reduxjs/toolkit';\nimport { ToDoState } from '../toDoSlice';\n\nexport const setErrorMessageReducer = (\n  state: ToDoState,\n  action: PayloadAction<string | undefined>,\n): void => {\n  state.errorMessage = action.payload;\n};\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    initThemeReact: () => void;\r\n    reactAutoInit: boolean;\r\n  }\r\n}\r\nwindow.initThemeReact = async () => {\r\n  const App = (await import('./App')).default;\r\n\r\n  document.querySelectorAll('[data-react-app]').forEach((el) => {\r\n    // hot module replacement needs to be able to overwrite the div\r\n    if (process.env.NODE_ENV !== 'development' && el.innerHTML) {\r\n      return;\r\n    }\r\n    const reactApp = el.getAttribute('data-react-app');\r\n    const rawReactConfig = el.getAttribute('data-react-config');\r\n    const reactConfig = rawReactConfig ? JSON.parse(rawReactConfig) : {};\r\n    if (!reactApp) {\r\n      return;\r\n    }\r\n    ReactDOM.render(\r\n      <React.StrictMode>\r\n        <Provider store={store}>\r\n          <App reactApp={reactApp} reactConfig={reactConfig} />\r\n        </Provider>\r\n      </React.StrictMode>,\r\n      el\r\n    );\r\n  });\r\n};\r\n\r\nif (window.reactAutoInit) {\r\n  window.initThemeReact();\r\n  window.reactAutoInit = false;\r\n}\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n  module.hot.accept('./App', window.initThemeReact);\r\n}\r\n"],"sourceRoot":""}