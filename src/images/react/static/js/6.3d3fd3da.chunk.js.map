{"version":3,"sources":["features/profileCard/components/ProfileItem/ProfileItem.module.css","app/components/CustomSelect/CustomSelect.tsx","features/profileCard/components/ProfileItem/ProfileItem.tsx","features/profileCard/selectors/profileListSelector.ts","features/profileCard/components/ProfileCard/getCreateOnClick.ts","features/profileCard/components/ProfileCard/ProfileCard.tsx","features/profileCard/components/ProfileCard/ProfileCard.test.tsx","../node_modules/classnames/index.js","app/components/CardFooterWrapper/CardFooterWrapper.tsx","app/components/CustomTextInput/CustomTextInput.tsx","app/components/CardFooterWrapper/CardFooterWrapper.module.css","features/profileCard/selectors/profileTypesSelector.ts","features/profileCard/selectors/isActiveSelector.ts","features/profileCard/components/ProfileItem/getNameOnChange.ts","features/profileCard/components/ProfileItem/getTypeOnChange.ts","features/profileCard/components/ProfileItem/getItemOnClick.ts","features/profileCard/components/ProfileItem/getDeleteOnClick.ts"],"names":["module","exports","CustomSelect","options","value","onChange","label","idPrefix","selectId","htmlFor","id","className","event","target","map","option","key","ProfileItem","profile","emptyProfile","profileTypes","useSelector","profileTypesSelector","isActive","getIsActiveSelector","classNames","styles","profileItem","active","onClick","getItemOnClick","profileId","CustomTextInput","name","getNameOnChange","autoFocus","profileType","getTypeOnChange","buttonWrapper","getDeleteOnClick","profileListSelector","state","profileList","getCreateOnClick","store","dispatch","createProfile","ProfileCard","reactConfig","role","aria-label","title","renderCard","render","test","asFragment","expect","toMatchSnapshot","screen","getByLabelText","toBeInTheDocument","getByRole","profileListItems","within","getAllByRole","toHaveLength","rerender","deleteButton","getByText","fireEvent","click","reset","createButton","lastItem","toHaveValue","hasOwn","hasOwnProperty","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","call","join","default","CardFooterWrapper","children","wrapper","inputId","type","activeProfileId","updateProfile","setActiveProfile","deleteProfile","stopPropagation"],"mappings":"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","file":"static/js/6.3d3fd3da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileItem\":\"ProfileItem_profileItem___Vthf\",\"buttonWrapper\":\"ProfileItem_buttonWrapper__Un2Su\"};","import React from 'react';\n\ninterface CustomSelectProps {\n  onChange: (value: string) => void;\n  options: string[];\n  value: string;\n  label: string;\n  idPrefix: string;\n}\n\nexport const CustomSelect: React.FC<CustomSelectProps> = ({\n  options,\n  value,\n  onChange,\n  label,\n  idPrefix,\n}) => {\n  const selectId = `${idPrefix}-select`;\n  return (\n    <div>\n      <label htmlFor={selectId}>{label}</label>\n      <select\n        id={selectId}\n        value={value}\n        className=\"form-control\"\n        onChange={(event): void => onChange(event?.target.value)}\n      >\n        {options.map((option) => (\n          <option key={option}>{option}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styles from './ProfileItem.module.css';\nimport classNames from 'classnames';\n\nimport { Profile } from '../../profileSlice';\nimport { CustomSelect } from 'app/components/CustomSelect/CustomSelect';\nimport { CustomTextInput } from 'app/components/CustomTextInput/CustomTextInput';\nimport { emptyProfile } from '../../helpers/profileTemplate';\nimport { profileTypesSelector } from '../../selectors/profileTypesSelector';\nimport { getIsActiveSelector } from '../../selectors/isActiveSelector';\nimport { getNameOnChange } from './getNameOnChange';\nimport { getTypeOnChange } from './getTypeOnChange';\nimport { getItemOnClick } from './getItemOnClick';\nimport { getDeleteOnClick } from './getDeleteOnClick';\n\ninterface ProfileProps {\n  profile: Profile;\n}\n\nexport const ProfileItem: React.FC<ProfileProps> = ({\n  profile = emptyProfile,\n}) => {\n  const profileTypes = useSelector(profileTypesSelector);\n  const isActive = useSelector(getIsActiveSelector(profile));\n\n  return (\n    <li\n      className={classNames('list-group-item', styles.profileItem, {\n        active: isActive,\n      })}\n      onClick={getItemOnClick(profile.profileId)}\n    >\n      <CustomTextInput\n        idPrefix={`name-${profile.profileId}`}\n        label={'Name'}\n        value={profile.name}\n        onChange={getNameOnChange(profile.profileId)}\n        autoFocus={isActive}\n      />\n      <CustomSelect\n        idPrefix={`type-${profile.profileId}`}\n        label={'Type'}\n        value={profile.profileType}\n        options={profileTypes}\n        onChange={getTypeOnChange(profile.profileId)}\n      />\n      <div className={styles.buttonWrapper}>\n        <button\n          className=\"btn btn-danger\"\n          onClick={getDeleteOnClick(profile.profileId)}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n","import { RootState } from 'app/rootReducer';\nimport { Profile } from '../profileSlice';\n\nexport const profileListSelector = (state: RootState): Profile[] =>\n  state.profile.profileList;\n","import { store } from 'app/store';\nimport { createProfile } from '../../profileSlice';\n\nexport const getCreateOnClick = () => (): void => {\n  store.dispatch(createProfile());\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { ProfileItem } from '../ProfileItem/ProfileItem';\nimport { profileListSelector } from '../../selectors/profileListSelector';\nimport { getCreateOnClick } from './getCreateOnClick';\nimport { CardFooterWrapper } from 'app/components/CardFooterWrapper/CardFooterWrapper';\nimport { TopLevelComponent } from 'app/utils/typeUtils';\n\ninterface ProfileCardProps {\n  reactConfig?: {\n    title?: string;\n  };\n}\nexport const ProfileCard: TopLevelComponent<ProfileCardProps> = ({\n  reactConfig,\n}) => {\n  const profileList = useSelector(profileListSelector);\n  return (\n    <div className=\"card\" role=\"main\" aria-label=\"Profile Card\">\n      <div className=\"card-header\">\n        <h5 className=\"card-title\">{reactConfig?.title}</h5>\n      </div>\n      <div className=\"card-body\">\n        <ul className=\"list-group\">\n          {profileList.map((profile) => (\n            <ProfileItem\n              key={profile.profileId}\n              profile={profile}\n            ></ProfileItem>\n          ))}\n        </ul>\n      </div>\n      <div className=\"card-footer\">\n        <CardFooterWrapper>\n          <button className=\"btn btn-primary\" onClick={getCreateOnClick()}>\n            Create New Profile\n          </button>\n        </CardFooterWrapper>\n      </div>\n    </div>\n  );\n};\nexport default ProfileCard;\n","/* eslint-disable max-lines-per-function */\nimport React from 'react';\nimport {\n  render,\n  screen,\n  within,\n  RenderResult,\n  fireEvent,\n} from '@testing-library/react';\nimport { Provider } from 'react-redux';\n\nimport { store } from 'app/store';\nimport { ProfileCard } from './ProfileCard';\nimport { reset } from '../../profileSlice';\n\nconst renderCard = (): RenderResult =>\n  render(\n    <Provider store={store}>\n      <ProfileCard />\n    </Provider>,\n  );\n\ntest('renders the Profile Card', () => {\n  const { asFragment } = renderCard();\n  expect(asFragment()).toMatchSnapshot();\n  expect(screen.getByLabelText(/profile card/i)).toBeInTheDocument();\n  const profileList = screen.getByRole('list');\n  expect(profileList).toBeInTheDocument();\n  const profileListItems = within(profileList).getAllByRole('listitem');\n  expect(profileListItems).toHaveLength(2);\n});\n\ntest('test delete button', () => {\n  const { rerender, asFragment } = renderCard();\n  const profileList = screen.getByRole('list');\n  let profileListItems = within(profileList).getAllByRole('listitem');\n  const deleteButton = within(profileListItems[0]).getByText(/delete/i);\n  fireEvent.click(deleteButton);\n  rerender(\n    <Provider store={store}>\n      <ProfileCard />\n    </Provider>,\n  );\n  profileListItems = within(profileList).getAllByRole('listitem');\n  expect(profileListItems).toHaveLength(1);\n  expect(asFragment()).toMatchSnapshot();\n});\n\ntest('test create button', () => {\n  store.dispatch(reset());\n  const { rerender, asFragment } = renderCard();\n  const createButton = screen.getByText(/create/i);\n  const profileList = screen.getByRole('list');\n  let profileListItems = within(profileList).getAllByRole('listitem');\n  expect(profileListItems).toHaveLength(2);\n  fireEvent.click(createButton);\n  rerender(\n    <Provider store={store}>\n      <ProfileCard />\n    </Provider>,\n  );\n  profileListItems = within(profileList).getAllByRole('listitem');\n  expect(profileListItems).toHaveLength(3);\n  expect(asFragment()).toMatchSnapshot();\n  const lastItem = profileListItems[2];\n  expect(within(lastItem).getByLabelText('Name')).toHaveValue('');\n  expect(within(lastItem).getByLabelText('Type')).toHaveValue('guest');\n});\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from 'react';\nimport styles from './CardFooterWrapper.module.css';\n\nexport const CardFooterWrapper: React.FC = ({ children }) => (\n  <div className={styles.wrapper}>{children}</div>\n);\n","import React from 'react';\n\ninterface CustomTextInputProps {\n  onChange: (value: string) => void;\n  value?: string;\n  label: string;\n  idPrefix: string;\n  autoFocus?: boolean;\n}\n\nexport const CustomTextInput: React.FC<CustomTextInputProps> = ({\n  value,\n  onChange,\n  label,\n  idPrefix,\n  autoFocus,\n}) => {\n  const inputId = `${idPrefix}-input`;\n\n  return (\n    <div>\n      <label htmlFor={inputId}>{label}</label>\n      <input\n        id={inputId}\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(event): void => onChange(event.target.value)}\n        autoFocus={autoFocus}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CardFooterWrapper_wrapper__1sA5G\"};","import { RootState } from 'app/rootReducer';\n\nexport const profileTypesSelector = (state: RootState): string[] =>\n  state.profile.profileTypes as string[];\n","import { RootState } from 'app/rootReducer';\nimport { Profile } from '../profileSlice';\nimport { ProfileTemplateFields } from '../helpers/profileTemplate';\nimport { WithRequired } from 'app/utils/typeUtils';\n\nexport const getIsActiveSelector = (\n  profile: WithRequired<Profile, ProfileTemplateFields>\n) => (state: RootState): boolean =>\n  state.profile.activeProfileId === profile.profileId;\n","import { store } from 'app/store';\nimport { updateProfile } from '../../profileSlice';\n\nexport const getNameOnChange = (profileId?: number) => (name: string): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(\n    updateProfile({\n      profileId,\n      name,\n    }),\n  );\n};\n","import { store } from 'app/store';\nimport { updateProfile, ProfileType } from '../../profileSlice';\n\nexport const getTypeOnChange = (profileId?: number) => (\n  value: string,\n): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(\n    updateProfile({\n      profileId,\n      profileType: value as ProfileType,\n    }),\n  );\n};\n","import { store } from 'app/store';\nimport { setActiveProfile } from '../../profileSlice';\n\nexport const getItemOnClick = (profileId?: number) => (): void => {\n  store.dispatch(setActiveProfile(profileId));\n};\n","import React from 'react';\nimport { store } from 'app/store';\nimport { deleteProfile } from '../../profileSlice';\n\nexport const getDeleteOnClick = (profileId?: number) => (\n  event: React.MouseEvent,\n): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(deleteProfile(profileId));\n  event.stopPropagation();\n};\n"],"sourceRoot":""}