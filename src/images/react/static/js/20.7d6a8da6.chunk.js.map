{"version":3,"sources":["features/userCard/api/deleteUserApi.ts","app/utils/liferayUtils.ts","features/userCard/api/getUsersApi.ts"],"names":["deleteUserApi","user","a","store","dispatch","deleteUserBegin","executeLiferayService","userId","deleteUserSuccess","getUsersApi","deleteUserFailure","liferayServicePromise","createPromise","_resolve","_reject","promise","Promise","resolve","reject","api","data","expectedResultType","window","Liferay","promisifiedLiferayService","postMessage","type","JSON","stringify","updateUserDummyData","oldPassword","newPassword1","newPassword2","passwordReset","reminderQueryQuestion","reminderQueryAnswer","screenName","emailAddress","facebookId","openId","languageId","timeZoneId","greeting","comments","firstName","middleName","lastName","prefixId","suffixId","birthdayMonth","birthdayDay","birthdayYear","smsSn","facebookSn","jabberSn","skypeSn","twitterSn","jobTitle","groupIds","organizationIds","roleIds","userGroupRoles","userGroupIds","male","serviceContext","createUserDummyData","autoPassword","password1","password2","autoScreenName","locale","sendEmail","getLiferayField","fieldName","getFieldFromLiferayObject","liferayFields","localStorage","getItem","parse","addEventListener","event","result","getUsersBegin","groupId","users","getUsersSuccess","getUsersFailure"],"mappings":"kOAcaA,EAAgB,SAACC,GAAD,6BAAgB,sBAAAC,EAAA,sEAMzCC,IAAMC,SAASC,6BAN0B,SAOnCC,YACJ,oBACA,CACEC,OAAQN,EAAKM,QAEf,UAZuC,OAczCJ,IAAMC,SAASI,+BACfC,wBAfyC,gDAiBzCN,IAAMC,SAASM,4BAAkB,EAAD,KAjBS,2D,4KCsCzCC,E,wBAdEC,EAAgB,WACpB,IAAIC,EAAUC,EAERC,EAAe,IAAIC,SAAQ,SAASC,EAASC,GACjDL,EAAWI,EACXH,EAAUI,KAMZ,OAHAH,EAAQE,QAAUJ,EAClBE,EAAQG,OAASJ,EAEVC,GAKIT,EAAqB,uCAAG,WACnCa,EACAC,EACAC,GAHmC,SAAAnB,EAAA,0DAK/BoB,OAAOC,QALwB,yCAM1BD,OAAOE,0BAA0BL,EAAKC,EAAMC,IANlB,cAQnCC,OAAOG,YACL,CACEC,KAAM,0BACNP,MACAC,KAAMO,KAAKC,UAAUR,GACrBC,sBAEF,KAEFV,EAAwBC,IAjBW,SAkBtBD,EAlBsB,mFAAH,0DA0BrBkB,EAAsB,CACjCC,YAAa,GACbC,aAAc,GACdC,aAAc,GACdC,eAAe,EACfC,sBAAuB,GACvBC,oBAAqB,GACrBC,WAAY,WACZC,aAAc,mBACdC,WAAY,EACZC,OAAQ,GACRC,WAAY,EACZC,WAAY,EACZC,SAAU,GACVC,SAAU,GACVC,UAAW,GACXC,WAAY,GACZC,SAAU,GACVC,SAAU,EACVC,SAAU,EACVC,cAAe,EACfC,YAAa,EACbC,aAAc,KACdC,MAAO,GACPC,WAAY,GACZC,SAAU,GACVC,QAAS,GACTC,UAAW,GACXC,SAAU,SACVC,SAAU,KACVC,gBAAiB,GACjBC,QAAS,GACTC,eAAgB,GAChBC,aAAc,GACdC,MAAM,EACNC,eAAgB,IAGLC,EAAsB,CACjCC,cAAc,EACdC,UAAW,GACXC,UAAW,GACXC,gBAAgB,EAChBjC,WAAY,GACZC,aAAc,GACdC,WAAY,EACZC,OAAQ,GACR+B,OAAQ,QACR1B,UAAW,GACXC,WAAY,GACZC,SAAU,GACVC,SAAU,EACVC,SAAU,EACVe,MAAM,EACNd,cAAe,EACfC,YAAa,EACbC,aAAc,KACdM,SAAU,GACVC,SAAU,KACVC,gBAAiB,KACjBC,QAAS,KACTE,aAAc,KACdS,WAAW,EACXP,eAAgB,IAGLQ,EAAe,uCAAG,WAAOC,GAAP,eAAAvE,EAAA,0DACzBoB,OAAOC,QADkB,yCAEpBD,OAAOoD,0BAA0BD,IAFb,cAIvBE,EAAgBC,aAAaC,QAAQ,iBAJd,kBAKtBlD,KAAKmD,MAAMH,GAAyBF,IALd,2CAAH,sDAQ5BnD,OAAOyD,iBAAiB,WAAW,SAASC,GAClB,wCAApBA,EAAM5D,KAAKM,MACbf,EAAsBM,QAAQ+D,EAAM5D,KAAK6D,Y,sICtIhCxE,EAAW,uCAAG,4BAAAP,EAAA,sEAMvBC,IAAMC,SAAS8E,2BANQ,KAgCF5E,IAhCE,SAmCJkE,YAAgB,WAnCZ,gCAmCnBW,QAnCmB,wBAiCrB,wBAjCqB,KAuCrB,SAvCqB,OAgCjBC,EAhCiB,OAyCvBjF,IAAMC,SAASiF,0BAAgBD,IAzCR,kDA2CvBjF,IAAMC,SAASkF,0BAAgB,EAAD,KA3CP,0DAAH","file":"static/js/20.7d6a8da6.chunk.js","sourcesContent":["import {\n  User,\n  deleteUserBegin,\n  deleteUserSuccess,\n  deleteUserFailure,\n  deleteUser,\n} from '../userSlice';\nimport { store } from 'app/store';\nimport {\n  promisifiedLiferayService,\n  executeLiferayService,\n} from 'app/utils/liferayUtils';\nimport { getUsersApi } from './getUsersApi';\n\nexport const deleteUserApi = (user: User) => async () => {\n  // if (process.env.NODE_ENV === 'development') {\n  //   store.dispatch(deleteUser(user));\n  //   return;\n  // }\n  try {\n    store.dispatch(deleteUserBegin());\n    await executeLiferayService(\n      '/user/delete-user',\n      {\n        userId: user.userId,\n      },\n      'object'\n    );\n    store.dispatch(deleteUserSuccess());\n    getUsersApi();\n  } catch (error) {\n    store.dispatch(deleteUserFailure(error));\n  }\n};\n","declare global {\n  interface Window {\n    Liferay: any;\n    getFieldFromLiferayObject: (fieldName: string) => string;\n    promisifiedLiferayService: (\n      api: string,\n      data: {},\n      expectedResultType: string\n    ) => Promise<{}>;\n  }\n}\n\n// This abstracts out most of the error handling and makes invoking api calls\n// inside of redux actions very tight, composable with Promise.all and\n// amenable to modern async-await syntax inside of thunk actions\nexport const promisifiedLiferayService = (\n  api: string,\n  data: {},\n  expectedResultType: any\n) =>\n  new Promise((resolve, reject) => {\n    try {\n      window.Liferay.Service(api, data, (result: any) => {\n        if (typeof result === expectedResultType) {\n          resolve(result);\n        } else if (expectedResultType === 'array' && Array.isArray(result)) {\n          resolve(result);\n        } else if (typeof result === 'string') {\n          reject(result);\n        } else {\n          reject('Unexpected error.');\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n\nconst createPromise = () => {\n  let _resolve, _reject;\n\n  const promise: any = new Promise(function(resolve, reject) {\n    _resolve = resolve;\n    _reject = reject;\n  });\n\n  promise.resolve = _resolve;\n  promise.reject = _reject;\n\n  return promise;\n};\n\nlet liferayServicePromise: any;\n\nexport const executeLiferayService = async (\n  api: string,\n  data: {},\n  expectedResultType: 'string' | 'array' | 'object'\n) => {\n  if (window.Liferay) {\n    return window.promisifiedLiferayService(api, data, expectedResultType);\n  }\n  window.postMessage(\n    {\n      type: 'EXECUTE_LIFERAY_SERVICE',\n      api,\n      data: JSON.stringify(data),\n      expectedResultType,\n    },\n    '*'\n  );\n  liferayServicePromise = createPromise();\n  return await liferayServicePromise;\n  // return {\n  //   string: '',\n  //   array: [],\n  //   object: {},\n  // }[expectedResultType];\n};\n\nexport const updateUserDummyData = {\n  oldPassword: '',\n  newPassword1: '',\n  newPassword2: '',\n  passwordReset: false,\n  reminderQueryQuestion: '',\n  reminderQueryAnswer: '',\n  screenName: 'not_null',\n  emailAddress: 'test@example.com',\n  facebookId: 0,\n  openId: '', // this is weird: only id field here that takes a string instead of an int\n  languageId: 0,\n  timeZoneId: 0,\n  greeting: '',\n  comments: '',\n  firstName: '',\n  middleName: '',\n  lastName: '',\n  prefixId: 0,\n  suffixId: 0,\n  birthdayMonth: 1,\n  birthdayDay: 1,\n  birthdayYear: 1970,\n  smsSn: '',\n  facebookSn: '',\n  jabberSn: '',\n  skypeSn: '',\n  twitterSn: '',\n  jobTitle: 'tester',\n  groupIds: null,\n  organizationIds: [],\n  roleIds: [],\n  userGroupRoles: [],\n  userGroupIds: [],\n  male: true,\n  serviceContext: {},\n};\n\nexport const createUserDummyData = {\n  autoPassword: false,\n  password1: '', //\n  password2: '', //\n  autoScreenName: false,\n  screenName: '', //\n  emailAddress: '', //\n  facebookId: 0,\n  openId: '',\n  locale: 'en_US',\n  firstName: '', //\n  middleName: '', //\n  lastName: '', //\n  prefixId: 0,\n  suffixId: 0,\n  male: true,\n  birthdayMonth: 1,\n  birthdayDay: 1,\n  birthdayYear: 1970,\n  jobTitle: '',\n  groupIds: null,\n  organizationIds: null,\n  roleIds: null,\n  userGroupIds: null,\n  sendEmail: false,\n  serviceContext: {},\n};\n\nexport const getLiferayField = async (fieldName: string): Promise<string> => {\n  if (window.Liferay) {\n    return window.getFieldFromLiferayObject(fieldName);\n  }\n  const liferayFields = localStorage.getItem('liferayFields');\n  return JSON.parse(liferayFields as string)[fieldName];\n};\n\nwindow.addEventListener('message', function(event) {\n  if (event.data.type === 'LOCAL_RETURN_LIFERAY_SERVICE_RESULT') {\n    liferayServicePromise.resolve(event.data.result);\n  }\n});\n","import { store } from 'app/store';\nimport {\n  promisifiedLiferayService,\n  getLiferayField,\n  executeLiferayService,\n} from 'app/utils/liferayUtils';\nimport {\n  getUsersBegin,\n  getUsersSuccess,\n  getUsersFailure,\n  User,\n} from '../userSlice';\n\nconst dummyUserData: User[] = [\n  {\n    userId: '1',\n    firstName: 'Ben',\n    middleName: '',\n    lastName: 'Kinsey',\n  },\n];\n\nexport const getUsersApi = async () => {\n  // if (process.env.NODE_ENV === 'development') {\n  //   store.dispatch(getUsersSuccess(dummyUserData));\n  //   return;\n  // }\n  try {\n    store.dispatch(getUsersBegin());\n\n    // fetch('/api/jsonws/invoke', {\n    //   headers: {\n    //     accept: 'application/json, text/javascript, */*; q=0.01',\n    //     'accept-language': 'en-US,en;q=0.9',\n    //     'cache-control': 'no-cache',\n    //     'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\n    //     pragma: 'no-cache',\n    //     'sec-fetch-dest': 'empty',\n    //     'sec-fetch-mode': 'cors',\n    //     'sec-fetch-site': 'same-origin',\n    //     'x-requested-with': 'XMLHttpRequest',\n    //   },\n    //   referrer: 'http://localhost:8080/web/guest/user-admin',\n    //   referrerPolicy: 'no-referrer-when-downgrade',\n    //   body:\n    //     'cmd=' +\n    //     encodeURIComponent('/user/get-group-users\":{\"groupId\":\"20124\"}}') +\n    //     '&p_auth=Fs4bLSXH',\n    //   method: 'POST',\n    //   mode: 'cors',\n    //   credentials: 'include',\n    // })\n    //   .then((response) => response.json())\n    //   .then(console.log);\n    const users = (await executeLiferayService(\n      '/user/get-group-users',\n      {\n        groupId: await getLiferayField('groupId'),\n        // start: 1,\n        // end: 2\n      },\n      'array'\n    )) as User[];\n    store.dispatch(getUsersSuccess(users));\n  } catch (error) {\n    store.dispatch(getUsersFailure(error));\n  }\n};\n"],"sourceRoot":""}