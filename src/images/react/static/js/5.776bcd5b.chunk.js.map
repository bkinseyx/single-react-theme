{"version":3,"sources":["features/profileCard/components/ProfileCard/ProfileCard.tsx","../node_modules/classnames/index.js","app/components/CustomTextInput/CustomTextInput.tsx","features/profileCard/selectors/profileTypesSelector.ts","features/profileCard/selectors/isActiveSelector.ts","features/profileCard/components/ProfileItem/getNameOnChange.ts","features/profileCard/components/ProfileItem/getTypeOnChange.ts","features/profileCard/components/ProfileItem/getItemOnClick.ts","features/profileCard/components/ProfileItem/getDeleteOnClick.ts","features/profileCard/components/ProfileItem/ProfileItem.module.css","app/components/CardFooterWrapper/CardFooterWrapper.tsx","app/components/CardFooterWrapper/CardFooterWrapper.module.css","app/components/CustomSelect/CustomSelect.tsx","features/profileCard/components/ProfileItem/ProfileItem.tsx","features/profileCard/selectors/profileListSelector.ts","features/profileCard/components/ProfileCard/getCreateOnClick.ts"],"names":["ProfileCard","reactConfig","profileList","useSelector","profileListSelector","className","role","aria-label","title","map","profile","key","profileId","onClick","getCreateOnClick","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","call","join","module","exports","default","CustomTextInput","value","onChange","label","idPrefix","autoFocus","inputId","htmlFor","id","type","event","target","profileTypesSelector","state","profileTypes","getIsActiveSelector","activeProfileId","getNameOnChange","name","store","dispatch","updateProfile","getTypeOnChange","profileType","getItemOnClick","setActiveProfile","getDeleteOnClick","deleteProfile","stopPropagation","CardFooterWrapper","children","styles","wrapper","CustomSelect","options","selectId","option","ProfileItem","emptyProfile","isActive","profileItem","active","buttonWrapper","createProfile"],"mappings":"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","file":"static/js/5.776bcd5b.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { ProfileItem } from '../ProfileItem/ProfileItem';\nimport { profileListSelector } from '../../selectors/profileListSelector';\nimport { getCreateOnClick } from './getCreateOnClick';\nimport { CardFooterWrapper } from 'app/components/CardFooterWrapper/CardFooterWrapper';\nimport { TopLevelComponent } from 'app/typeUtils';\n\ninterface ProfileCardProps {\n  reactConfig?: {\n    title?: string;\n  };\n}\nexport const ProfileCard: TopLevelComponent<ProfileCardProps> = ({\n  reactConfig,\n}) => {\n  const profileList = useSelector(profileListSelector);\n  return (\n    <div className=\"card\" role=\"main\" aria-label=\"Profile Card\">\n      <div className=\"card-header\">\n        <h5 className=\"card-title\">{reactConfig?.title}</h5>\n      </div>\n      <div className=\"card-body\">\n        <ul className=\"list-group\">\n          {profileList.map((profile) => (\n            <ProfileItem\n              key={profile.profileId}\n              profile={profile}\n            ></ProfileItem>\n          ))}\n        </ul>\n      </div>\n      <div className=\"card-footer\">\n        <CardFooterWrapper>\n          <button className=\"btn btn-primary\" onClick={getCreateOnClick()}>\n            Create New Profile\n          </button>\n        </CardFooterWrapper>\n      </div>\n    </div>\n  );\n};\nexport default ProfileCard;\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from 'react';\n\ninterface CustomTextInputProps {\n  onChange: (value: string) => void;\n  value?: string;\n  label: string;\n  idPrefix: string;\n  autoFocus?: boolean;\n}\n\nexport const CustomTextInput: React.FC<CustomTextInputProps> = ({\n  value,\n  onChange,\n  label,\n  idPrefix,\n  autoFocus,\n}) => {\n  const inputId = `${idPrefix}-input`;\n\n  return (\n    <div>\n      <label htmlFor={inputId}>{label}</label>\n      <input\n        id={inputId}\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(event): void => onChange(event.target.value)}\n        autoFocus={autoFocus}\n      />\n    </div>\n  );\n};\n","import { RootState } from 'app/rootReducer';\n\nexport const profileTypesSelector = (state: RootState): string[] =>\n  state.profile.profileTypes as string[];\n","import { RootState } from 'app/rootReducer';\nimport { Profile } from '../profileSlice';\nimport { WithRequired } from 'app/typeUtils';\nimport { ProfileTemplateFields } from '../helpers/profileTemplate';\n\nexport const getIsActiveSelector = (\n  profile: WithRequired<Profile, ProfileTemplateFields>\n) => (state: RootState): boolean =>\n  state.profile.activeProfileId === profile.profileId;\n","import { store } from 'app/store';\nimport { updateProfile } from '../../profileSlice';\n\nexport const getNameOnChange = (profileId?: number) => (name: string): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(\n    updateProfile({\n      profileId,\n      name,\n    }),\n  );\n};\n","import { store } from 'app/store';\nimport { updateProfile, ProfileType } from '../../profileSlice';\n\nexport const getTypeOnChange = (profileId?: number) => (\n  value: string,\n): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(\n    updateProfile({\n      profileId,\n      profileType: value as ProfileType,\n    }),\n  );\n};\n","import { store } from 'app/store';\nimport { setActiveProfile } from '../../profileSlice';\n\nexport const getItemOnClick = (profileId?: number) => (): void => {\n  store.dispatch(setActiveProfile(profileId));\n};\n","import React from 'react';\nimport { store } from 'app/store';\nimport { deleteProfile } from '../../profileSlice';\n\nexport const getDeleteOnClick = (profileId?: number) => (\n  event: React.MouseEvent,\n): void => {\n  /* istanbul ignore next */\n  if (!profileId) {\n    return;\n  }\n  store.dispatch(deleteProfile(profileId));\n  event.stopPropagation();\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileItem\":\"ProfileItem_profileItem___Vthf\",\"buttonWrapper\":\"ProfileItem_buttonWrapper__Un2Su\"};","import React from 'react';\nimport styles from './CardFooterWrapper.module.css';\n\nexport const CardFooterWrapper: React.FC = ({ children }) => (\n  <div className={styles.wrapper}>{children}</div>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CardFooterWrapper_wrapper__1sA5G\"};","import React from 'react';\n\ninterface CustomSelectProps {\n  onChange: (value: string) => void;\n  options: string[];\n  value: string;\n  label: string;\n  idPrefix: string;\n}\n\nexport const CustomSelect: React.FC<CustomSelectProps> = ({\n  options,\n  value,\n  onChange,\n  label,\n  idPrefix,\n}) => {\n  const selectId = `${idPrefix}-select`;\n  return (\n    <div>\n      <label htmlFor={selectId}>{label}</label>\n      <select\n        id={selectId}\n        value={value}\n        className=\"form-control\"\n        onChange={(event): void => onChange(event?.target.value)}\n      >\n        {options.map((option) => (\n          <option key={option}>{option}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styles from './ProfileItem.module.css';\nimport classNames from 'classnames';\n\nimport { Profile } from '../../profileSlice';\nimport { CustomSelect } from 'app/components/CustomSelect/CustomSelect';\nimport { CustomTextInput } from 'app/components/CustomTextInput/CustomTextInput';\nimport { emptyProfile } from '../../helpers/profileTemplate';\nimport { profileTypesSelector } from '../../selectors/profileTypesSelector';\nimport { getIsActiveSelector } from '../../selectors/isActiveSelector';\nimport { getNameOnChange } from './getNameOnChange';\nimport { getTypeOnChange } from './getTypeOnChange';\nimport { getItemOnClick } from './getItemOnClick';\nimport { getDeleteOnClick } from './getDeleteOnClick';\n\ninterface ProfileProps {\n  profile: Profile;\n}\n\nexport const ProfileItem: React.FC<ProfileProps> = ({\n  profile = emptyProfile,\n}) => {\n  const profileTypes = useSelector(profileTypesSelector);\n  const isActive = useSelector(getIsActiveSelector(profile));\n\n  return (\n    <li\n      className={classNames('list-group-item', styles.profileItem, {\n        active: isActive,\n      })}\n      onClick={getItemOnClick(profile.profileId)}\n    >\n      <CustomTextInput\n        idPrefix={`name-${profile.profileId}`}\n        label={'Name'}\n        value={profile.name}\n        onChange={getNameOnChange(profile.profileId)}\n        autoFocus={isActive}\n      />\n      <CustomSelect\n        idPrefix={`type-${profile.profileId}`}\n        label={'Type'}\n        value={profile.profileType}\n        options={profileTypes}\n        onChange={getTypeOnChange(profile.profileId)}\n      />\n      <div className={styles.buttonWrapper}>\n        <button\n          className=\"btn btn-danger\"\n          onClick={getDeleteOnClick(profile.profileId)}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n","import { RootState } from 'app/rootReducer';\nimport { Profile } from '../profileSlice';\n\nexport const profileListSelector = (state: RootState): Profile[] =>\n  state.profile.profileList;\n","import { store } from 'app/store';\nimport { createProfile } from '../../profileSlice';\n\nexport const getCreateOnClick = () => (): void => {\n  store.dispatch(createProfile());\n};\n"],"sourceRoot":""}