{"version":3,"sources":["features/toDoCard/components/ToDoItem/getDescriptionOnChange.ts","features/toDoCard/components/ToDoItem/getDeleteOnClick.ts","features/toDoCard/components/ToDoItem/getIsCompleteOnChange.ts","features/toDoCard/components/ToDoItem/ToDoItem.module.css","app/components/CustomCheckbox/CustomCheckbox.tsx","features/toDoCard/components/ToDoItem/ToDoItem.tsx","app/components/CustomCheckbox/CustomCheckbox.module.css","app/components/CustomTextInput/CustomTextInput.tsx"],"names":["getDescriptionOnChange","toDoId","description","store","dispatch","updateToDo","getDeleteOnClick","deleteToDo","getIsCompleteOnChange","isComplete","module","exports","CustomCheckbox","checked","onChange","label","idPrefix","autoFocus","inputId","htmlFor","id","type","className","styles","checkbox","event","target","ToDoItem","toDo","emptyToDo","toDoItem","CustomTextInput","value","buttonWrapper","onClick"],"mappings":"2HAAA,iFAGaA,EAAyB,SAACC,GAAD,OAAqB,SACzDC,GAGKD,GAGLE,IAAMC,SACJC,qBAAW,CACTJ,SACAC,oB,iCCbN,2EAGaI,EAAmB,SAACL,GAAD,OAAqB,WAE9CA,GAGLE,IAAMC,SAASG,qBAAWN,O,iCCR5B,gFAGaO,EAAwB,SAACP,GAAD,OAAqB,SACxDQ,GAGKR,GAGLE,IAAMC,SACJC,qBAAW,CACTJ,SACAQ,mB,oBCZNC,EAAOC,QAAU,CAAC,SAAW,2BAA2B,cAAgB,kC,oLCW3DC,EAAgD,SAAC,GAMvD,IALLC,EAKI,EALJA,QACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAC,EACI,EADJA,UAEMC,EAAO,UAAMF,EAAN,UAEb,OACE,6BACE,2BAAOG,QAASD,GAAUH,GAC1B,2BACEK,GAAIF,EACJG,KAAK,WACLC,UAAS,uBAAkBC,IAAOC,UAClCX,QAASA,EACTC,SAAU,SAACW,GAAD,OAAiBX,EAASW,EAAMC,OAAOb,UACjDI,UAAWA,MCfNU,EAAgC,SAAC,GAA0B,IAAD,IAAvBC,YAAuB,MAAhBC,YAAgB,EACrE,OACE,wBAAIP,UAAW,mBAAqBC,IAAOO,UACzC,kBAAC,EAAD,CACEd,SAAQ,qBAAgBY,EAAK3B,QAC7Bc,MAAO,YACPF,QAASe,EAAKnB,WACdK,SAAUN,gCAAsBoB,EAAK3B,UAEvC,kBAAC8B,EAAA,EAAD,CACEf,SAAQ,sBAAiBY,EAAK3B,QAC9Bc,MAAO,cACPiB,MAAOJ,EAAK1B,YACZY,SAAUd,iCAAuB4B,EAAK3B,UAExC,yBAAKqB,UAAWC,IAAOU,eACrB,4BACEX,UAAU,iBACVY,QAAS5B,2BAAiBsB,EAAK3B,SAFjC,c,oBC9BRS,EAAOC,QAAU,CAAC,SAAW,mC,gCCD7B,sDAUaoB,EAAkD,SAAC,GAMzD,IALLC,EAKI,EALJA,MACAlB,EAII,EAJJA,SACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAC,EACI,EADJA,UAEMC,EAAO,UAAMF,EAAN,UAEb,OACE,6BACE,2BAAOG,QAASD,GAAUH,GAC1B,2BACEK,GAAIF,EACJG,KAAK,OACLC,UAAU,eACVU,MAAOA,EACPlB,SAAU,SAACW,GAAD,OAAiBX,EAASW,EAAMC,OAAOM,QACjDf,UAAWA","file":"static/js/14.83330ca5.chunk.js","sourcesContent":["import { updateToDo } from '../../toDoSlice';\nimport { store } from 'app/store';\n\nexport const getDescriptionOnChange = (toDoId?: number) => (\n  description: string,\n): void => {\n  /* istanbul ignore next */\n  if (!toDoId) {\n    return;\n  }\n  store.dispatch(\n    updateToDo({\n      toDoId,\n      description,\n    }),\n  );\n};\n","import { deleteToDo } from '../../toDoSlice';\nimport { store } from 'app/store';\n\nexport const getDeleteOnClick = (toDoId?: number) => (): void => {\n  /* istanbul ignore next */\n  if (!toDoId) {\n    return;\n  }\n  store.dispatch(deleteToDo(toDoId));\n};\n","import { updateToDo } from '../../toDoSlice';\nimport { store } from 'app/store';\n\nexport const getIsCompleteOnChange = (toDoId?: number) => (\n  isComplete: boolean,\n): void => {\n  /* istanbul ignore next */\n  if (!toDoId) {\n    return;\n  }\n  store.dispatch(\n    updateToDo({\n      toDoId,\n      isComplete,\n    }),\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toDoItem\":\"ToDoItem_toDoItem__1I-c8\",\"buttonWrapper\":\"ToDoItem_buttonWrapper__1GahE\"};","import React from 'react';\n\nimport styles from './CustomCheckbox.module.css';\n\ninterface CustomCheckboxProps {\n  onChange: (value: boolean) => void;\n  checked?: boolean;\n  label: string;\n  idPrefix: string;\n  autoFocus?: boolean;\n}\n\nexport const CustomCheckbox: React.FC<CustomCheckboxProps> = ({\n  checked,\n  onChange,\n  label,\n  idPrefix,\n  autoFocus,\n}) => {\n  const inputId = `${idPrefix}-input`;\n\n  return (\n    <div>\n      <label htmlFor={inputId}>{label}</label>\n      <input\n        id={inputId}\n        type=\"checkbox\"\n        className={`form-control ${styles.checkbox}`}\n        checked={checked}\n        onChange={(event): void => onChange(event.target.checked)}\n        autoFocus={autoFocus}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport styles from './ToDoItem.module.css';\n\nimport { ToDo } from '../../toDoSlice';\nimport { CustomTextInput } from 'app/components/CustomTextInput/CustomTextInput';\nimport { emptyToDo } from '../../helpers/toDoTemplate';\nimport { getDescriptionOnChange } from './getDescriptionOnChange';\nimport { getDeleteOnClick } from './getDeleteOnClick';\nimport { getIsCompleteOnChange } from './getIsCompleteOnChange';\nimport { CustomCheckbox } from 'app/components/CustomCheckbox/CustomCheckbox';\n\ninterface ToDoProps {\n  toDo: ToDo;\n}\n\nexport const ToDoItem: React.FC<ToDoProps> = ({ toDo = emptyToDo }) => {\n  return (\n    <li className={'list-group-item ' + styles.toDoItem}>\n      <CustomCheckbox\n        idPrefix={`isComplete-${toDo.toDoId}`}\n        label={'Complete?'}\n        checked={toDo.isComplete}\n        onChange={getIsCompleteOnChange(toDo.toDoId)}\n      />\n      <CustomTextInput\n        idPrefix={`description-${toDo.toDoId}`}\n        label={'Description'}\n        value={toDo.description}\n        onChange={getDescriptionOnChange(toDo.toDoId)}\n      />\n      <div className={styles.buttonWrapper}>\n        <button\n          className=\"btn btn-danger\"\n          onClick={getDeleteOnClick(toDo.toDoId)}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"CustomCheckbox_checkbox__3dmq1\"};","import React from 'react';\n\ninterface CustomTextInputProps {\n  onChange: (value: string) => void;\n  value?: string;\n  label: string;\n  idPrefix: string;\n  autoFocus?: boolean;\n}\n\nexport const CustomTextInput: React.FC<CustomTextInputProps> = ({\n  value,\n  onChange,\n  label,\n  idPrefix,\n  autoFocus,\n}) => {\n  const inputId = `${idPrefix}-input`;\n\n  return (\n    <div>\n      <label htmlFor={inputId}>{label}</label>\n      <input\n        id={inputId}\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        onChange={(event): void => onChange(event.target.value)}\n        autoFocus={autoFocus}\n      />\n    </div>\n  );\n};\n"],"sourceRoot":""}